question,answer
"create an `Array` which holds three elements of type `felt252`.The first element shoud be 0.","
```
use array::ArrayTrait;
use option::OptionTrait;

fn create_array() -> Array<felt252> {
    let mut a = ArrayTrait::new();
    a.append(0);
    a.append(1);
    a.append(1);
    a
}


// Don't change anything in the test
#[test]
fn test_array_len() {
    let mut a = create_array();
}
```"
"create an `Array` which holds three elements of type `felt252`.First element should be 0.
Check the length of the created array and the value of the first element","
```
use array::ArrayTrait;
use option::OptionTrait;

fn create_array() -> Array<felt252> {
    let mut a = ArrayTrait::new();
    a.append(0);
    a.append(1);
    a.append(1);
    a
}


// Don't change anything in the test
#[test]
fn test_array_len() {
    let mut a = create_array();
    assert(a.len() == 3, 'Array length is not 3');
    assert(a.pop_front().unwrap() == 0, 'First element is not 0');
}
```
"
"Modify the code so it passes the tests:
use array::ArrayTrait;
use option::OptionTrait;

// Don't modify this function
fn create_array() -> Array<felt252> {
    let mut a = ArrayTrait::new();
    a.append(42);
    a
}


#[test]
fn test_arrays2() {
    let mut a = create_array();
    assert(*a.at(0) == 42, 'First element is not 42');
}

#[test]
fn test_arrays2_empty() {
    let mut a = create_array();
    assert(a.len() == 0, 'Array length is not 0');
}
","
```
use array::ArrayTrait;
use option::OptionTrait;

// Don't modify this function
fn create_array() -> Array<felt252> {
    let mut a = ArrayTrait::new();
    a.append(42);
    a
}

fn remove_element_from_array(
    ref a: Array<felt252>
) { 
    a.pop_front();
}

#[test]
fn test_arrays2() {
    let mut a = create_array();
    assert(*a.at(0) == 42, 'First element is not 42');
}

#[test]
fn test_arrays2_empty() {
    let mut a = create_array();
    remove_element_from_array(ref a);
    assert(a.len() == 0, 'Array length is not 0');
}
```
"