question,answer
"What are dictionaries","Cairo provides in its core library a dictionary-like type. The Felt252Dict<T> data type represents a collection of key-value pairs where each key is unique and associated with a corresponding value. This type of data structure is known differently across different programming languages such as maps, hash tables, associative arrays and many others."
"what are dictionaries used for ?","The Felt252Dict<T> type is useful when you want to organize your data in a certain way for which using an Array<T> and indexing doesn't suffice. Cairo dictionaries also allow the programmer to easily simulate the existence of mutable memory when there is none."
"Can I use any type for keys of a dictionary ?","It is normal in other languages when creating a new dictionary to define the data types of both key and value. In Cairo, the key type is restricted to felt252 leaving only the possibility to specify the value data type, represented by T in Felt252Dict<T>."
"define a dictionary called messages","
```
    let mut balances: Felt252Dict<u64> = Default::default();
```
"
"create a dictionary and insert value 100 associated to key 'Alex' and 200 to key 'maria'","
 ```
    let mut dict: Felt252Dict<u64> = Default::default();

    dict.insert('Alex', 100);
    dict.insert('Maria', 200);
```
"
"create a dictionary, add a value associated to key 200, and read the value associated to key 200","
```
     let mut dict: Felt252Dict<u64> = Default::default();

    dict.insert(200, 100);
    let value_read = dict.get(200);
```
"
"what value will I get in x:
    let mut dict: Felt252Dict<u64> = Default::default();

    dict.insert('Alex', 100);
    dict.insert('Maria', 200);

x= let value_read = dict.get('Bob');
"," 'Bob' is not a valid key,if you try to get the value of an inexistent key, from a dictionary you will get 0"
"Can I delete an element from a dictionary","No. There is no way to delete data from a dictionary."
 "what is ownership in Cairo ?","Cairo implements an ownership system to ensure the safety and correctness of its compiled code. The ownership mechanism complements the linear type system, which enforces that objects are used exactly once. This helps prevent common operations that can produce runtime errors, such as illegal memory address references or multiple writes to the same memory address, and ensures the soundness of Cairo programs by checking at compile time that all the dictionaries are squashed."
"initialize a dictionary to store user ages and add an entry for 'Bob' being 30 years old","
    let mut user_ages: Felt252Dict<u64> = Default::default();
    user_ages.insert('Bob', 30);
"
"define a dictionary to keep track of stock quantities and set the count of 'apples' to 50","
    let mut stock_quantities: Felt252Dict<u64> = Default::default();
    stock_quantities.insert('apples', 50);
"
"create a new dictionary to hold game scores, and add two scores: 'player1' with 1500 and 'player2' with 3500","
    let mut game_scores: Felt252Dict<u64> = Default::default();
    game_scores.insert('player1', 1500);
    game_scores.insert('player2', 3500);
"
"define a dictionary for product prices, add price for 'milk' at 3 dollars, and check the price of 'milk'","
    let mut product_prices: Felt252Dict<u64> = Default::default();
    product_prices.insert('milk', 3);
    let milk_price = product_prices.get('milk');
"
"create a dictionary for employee IDs and salaries, include an entry for employee ID 102 with a salary of 60000","
    let mut employee_salaries: Felt252Dict<u64> = Default::default();
    employee_salaries.insert(102, 60000);
"
"create a dictionary called 'language_codes', put an entry mapping 'EN' to 'English' and 'FR' to 'French'","
    let mut language_codes: Felt252Dict<String> = Default::default();
    language_codes.insert('EN', 'English');
    language_codes.insert('FR', 'French');
"
"Which data structure is the Felt252Dict<T> most comparable to?","map"
"When is the Felt252Dict<T> type useful?","To organize data in a certain way that using an Array<T> and indexing doesn't suffice."
"What does the Felt252Dict<T> type allow the programmer to simulate?","Mutable memory"
"What is restricted to felt252 in a Felt252Dict<T>?","The key type"
"What does get(felt252) -> T do?","Allows reading values from a dictionary"
"What does insert(felt252, T) -> () do?","Allows writing values to a dictionary"
"Give an example of how to create a dictionary to represent a mapping between individuals and their balance.","fn main() { let mut balances: Felt252Dict<u64> = Default::default(); balances.insert('Alex', 100); balances.insert('Maria', 200); }"
"Which trait includes all basic operations for Felt252Dict<T>?","Felt252DictTrait"
"What method can be used to add two individuals, each with their own balance, using the insert method?","insert"
"Which method can be used to check the balance of users?","get"
"What is the purpose of the Felt252Dict<T> type?","To represent a collection of key-value pairs where each key is unique and associated with a corresponding value."
"How does Cairo achieve mutability with the Felt252Dict<T> type?","By simulating mutable memory even though Cairo's memory is immutable."
"What are some other names for a dictionary-like type across different programming languages?","Maps, hash tables, associative arrays"
"What is the Felt252Dict<T> data type?","A collection of key-value pairs where each key is unique and associated with a corresponding value."
"What is the purpose of the insert method in a dictionary?","To insert a new key-value pair into the dictionary."
"What is the purpose of the get method in a dictionary?","To retrieve the value associated with a given key from the dictionary."
"What is the syntax for creating a new instance of Felt252Dict<u64>?","let mut balances: Felt252Dict<u64> = Default::default();"
"What is the significance of the Felt252Dict<T> type in Cairo?","It provides a way to organize data and simulate mutable memory in an immutable memory environment."
"What is the difference between a felt252 and a T in Felt252Dict<T>?","felt252 is the restricted key type, while T is the value type that can be specified."
"What is the purpose of the Default trait in Cairo?","To provide a default value for a type when it is created."
"What is the key type restricted to?","felt252"
"What is the core functionality of a Felt252Dict<T> implemented in?","Felt252DictTrait"
"What are the basic operations included in Felt252DictTrait?","insert(felt252, T) and get(felt252)"
"How do we create a new instance of Felt252Dict<u64>?","By using the default method of the Default trait"
"How do we add individuals with their own balance to the dictionary?","Using the insert method"
"How do we check the balance of our users?","With the get method"
"What is the purpose of using Felt252Dict<T> with Cairo's immutable memory?","To overcome the obstacle of only being able to write to a memory cell once"
"What is the main benefit of using Felt252Dict<T> in Cairo?","It allows the programmer to efficiently organize and retrieve data using key-value pairs."
"How does Felt252Dict<T> differ from Array<T> in Cairo?","Felt252Dict<T> uses key-value pairs for data organization, while Array<T> stores data sequentially and accesses it using indices."
"What is the insert method in Felt252Dict<T> used for?","It is used to add a new key-value pair to the dictionary."
"What is the get method in Felt252Dict<T> used for?","It is used to retrieve the value associated with a given key from the dictionary."
"Why would you use Felt252Dict<T> instead of a regular array in Cairo?","Felt252Dict<T> allows for faster access to data using keys, making it more efficient for certain use cases."
"What are some of the limitations of Felt252Dict<T> in Cairo?","It is limited to using felt252 as the key type, and it requires more memory compared to a regular array."
"Can we use Felt252Dict<T> to store any type of data in Cairo?","Yes, as long as the value type T is supported by Cairo's type system."
"What is the purpose of the Default trait in Cairo?","It provides a default implementation for creating new instances of a type, usually with default values."
"What is the significance of the assert statements in the code example given in the text?","They are used to verify that the balances stored in the dictionary match the expected values."
"What are the advantages of using a dictionary-like type in Cairo's immutable memory model?","It enables efficient data organization and retrieval based on keys, overcoming the limitation of immutable memory."
"Can we use Felt252Dict<T> to create a mapping between strings and integers in Cairo?","Yes, as long as the key type is felt252, we can use strings as keys and integers as values in a Felt252Dict<u64>."
"How does Felt252Dict<T> in Cairo compare to similar data structures in other programming languages?","It offers similar functionality, allowing for efficient key-value pair storage and retrieval, but it is specifically designed for Cairo's immutable memory model."
"What is the purpose of the Felt252Dict<T> data structure?","It simulates mutability in Cairo's non-deterministic design by implementing a list of entries for each dictionary interaction."
"How does Felt252Dict<T> represent each entry?","Each entry has a key field, a previous_value field, and a new_value field."
"What happens when we insert an element into a Felt252Dict<T>?","A new Entry<T> is registered where the new_value is the element being inserted, and the previous_value is the last element inserted before this."
"How does the list of entries in Felt252Dict<T> grow?","With each read/write operation, a new entry is added to the list."
"What is the worst-case time complexity for interacting with Felt252Dict<T>?","O(n), where n is the number of entries in the list."
"Why is the previous_value field needed in Felt252Dict<T>?","It is required for 'dictionary squashing', which verifies that the proof generated by a Cairo program execution is correct."
"What is the purpose of the squash_dict method?","It checks that there was no illegal tampering with the dictionary by verifying that the ith entry new_value is equal to the ith + 1 entry previous_value."
"When is squash_dict called?","It is called automatically via the Felt252Dict<T> implementation of the Destruct<T> trait."
"What is the difference between Drop<T> and Destruct<T>?","Drop<T> is treated as a no-op operation, while Destruct<T> generates new CASM."
"What is the entry method in Felt252DictTrait<T>?","It is part of the basic functionality of a dictionary and is used to access the value associated with a given key."
"How does Felt252Dict<T> interact with complex types like Array<T>?","It can be used to store and retrieve values from an Array<T> by using the key as the index."
"Can we implement a struct with a dictionary as a member?","Yes, we can implement a struct with a dictionary as a member, and we will see an example of this in the later section."
"What is a disadvantage of using Felt252Dict<T>?","It has a worst-case time complexity of O(n), where n is the number of entries in the list, for each read/write operation."
"What is the most commonly used field in Cairo?","The most commonly used field in Cairo is the finite field Fp, which consists of p elements and is defined by the modulus p."
"How is a Cairo program represented?","A Cairo program is represented as a sequence of instructions, each of which performs a specific operation."
"What is the difference between a Cairo program and a Stark proof?","A Cairo program is the code that is executed, while a Stark proof is the mathematical object that is generated as a result of the execution."
"What is the most commonly used hash function in Cairo?","The most commonly used hash function in Cairo is the SHA256 hash function."
"How is randomness generated in Cairo?","Randomness in Cairo is generated using a pseudo-random number generator (PRNG) that is seeded with a secret value."
"What is the purpose of the Signature trait in Cairo?","It represents a signature, which is a mathematical object that is used to verify the authenticity of a message."
"What is the most commonly used signature scheme in Cairo?","The most commonly used signature scheme in Cairo is the Ed25519 signature scheme."
"What is the difference between a signature and a proof?","A signature is a mathematical object that is used to verify the authenticity of a message, while a proof is a mathematical object that is used to demonstrate the validity of a statement or assertion."
"What are some potential use cases for StarkNet?","Decentralized finance (DeFi), non-fungible tokens (NFTs), gaming, social media, and more."
"What is the native token of StarkNet?","The native token of StarkNet is STRK."
"What does the entry method return?","A tuple containing a Felt252DictEntry<T> and the value previously held by the key."
"What is the purpose of the finalize method?","It inserts an entry into a dictionary and returns ownership of the dictionary."
"What are the parameters of the finalize method?","A Felt252DictEntry<T> and a new value."
"What does the finalize method return?","The updated dictionary."
"What are the steps involved in implementing a custom get method for a dictionary using entry and finalize?","Create a new entry using entry, insert the entry with the previous value, and return the value."
"What are the steps involved in implementing a custom insert method for a dictionary using entry and finalize?","Get the last entry associated with the key, insert the entry back in the dictionary with the updated value, and receive ownership of the dictionary."
"How are the custom get and insert methods similar to the built-in get and insert methods for Felt252Dict<T>?","They are implemented in a similar way."
"What is the purpose of the Felt252Dict<T> data structure?","It efficiently maintains mappings between felt252 keys and values."
"How does Felt252Dict<T> internally work?","It uses a list of entries, each representing a dictionary access, and updates the last entry based on the operation performed."
"What are the advantages of using Felt252Dict<T> over a hash map or tree-based dictionary?","It offers better performance for certain operations, such as accessing recent entries or iterating through the dictionary."
"What are the limitations of Felt252Dict<T>?","It has a fixed size and can only store a limited number of entries."
"When should Felt252Dict<T> be used?","When working with small dictionaries and performance is a critical factor."
"What is the purpose of the entry method in Felt252Dict<T>?","It creates a new entry in the dictionary, given a specific key."
"What is the purpose of the finalize method in Felt252Dict<T>?","It updates an entry in the dictionary with a new value, given a previous entry."
"What are the parameters of the entry method in Felt252Dict<T>?","The dictionary and the key to create the entry for."
"What are the parameters of the finalize method in Felt252Dict<T>?","The entry to update and the new value."
"What does the entry method return in Felt252Dict<T>?","A tuple containing the entry and the previous value associated with the key."
"What does the finalize method return in Felt252Dict<T>?","The updated dictionary."
"What is the difference between the entry and finalize methods in Felt252Dict<T>?","The entry method creates a new entry, while the finalize method updates an existing entry."
"What is the purpose of the custom_get function in the example code?
use core::dict::Felt252DictEntryTrait;

fn custom_get<T, +Felt252DictValue<T>, +Drop<T>, +Copy<T>>(
    ref dict: Felt252Dict<T>, key: felt252
) -> T {
    // Get the new entry and the previous value held at `key`
    let (entry, prev_value) = dict.entry(key);

    // Store the value to return
    let return_value = prev_value;

    // Update the entry with `prev_value` and get back ownership of the dictionary
    dict = entry.finalize(prev_value);

    // Return the read value
    return_value
}
","It demonstrates how to implement a custom get method using entry and finalize."
"Give an exemple on how to implement a custom get method using entry and finalize.","
use core::dict::Felt252DictEntryTrait;

fn custom_get<T, +Felt252DictValue<T>, +Drop<T>, +Copy<T>>(
    ref dict: Felt252Dict<T>, key: felt252
) -> T {
    // Get the new entry and the previous value held at `key`
    let (entry, prev_value) = dict.entry(key);

    // Store the value to return
    let return_value = prev_value;

    // Update the entry with `prev_value` and get back ownership of the dictionary
    dict = entry.finalize(prev_value);

    // Return the read value
    return_value
}
"
"What is the purpose of the custom_insert function in the example code?
use core::dict::Felt252DictEntryTrait;

fn custom_insert<T, +Felt252DictValue<T>, +Destruct<T>, +Drop<T>>(
    ref dict: Felt252Dict<T>, key: felt252, value: T
) {
    // Get the last entry associated with `key`
    // Notice that if `key` does not exists, _prev_value will
    // be the default value of T.
    let (entry, _prev_value) = dict.entry(key);

    // Insert `entry` back in the dictionary with the updated value,
    // and receive ownership of the dictionary
    dict = entry.finalize(value);
}","It demonstrates how to implement a custom insert method using entry and finalize."
"Give an exemple on how to implement a custom insert method using entry and finalize.","
use core::dict::Felt252DictEntryTrait;

fn custom_insert<T, +Felt252DictValue<T>, +Destruct<T>, +Drop<T>>(
    ref dict: Felt252Dict<T>, key: felt252, value: T
) {
    // Get the last entry associated with `key`
    // Notice that if `key` does not exists, _prev_value will
    // be the default value of T.
    let (entry, _prev_value) = dict.entry(key);

    // Insert `entry` back in the dictionary with the updated value,
    // and receive ownership of the dictionary
    dict = entry.finalize(value);
}
"
"What does Box<T> do?","Box<T> allocates a new memory segment for a type and provides a pointer to it that can only be manipulated in a single place at a time."
"How to get a value back from a dictionary?","To get a value back, use the get method, then use the match_nullable function to verify if the value is null, and finally, unwrap the value from Box<T>."
"Why is it not straightforward to make a dictionary of types not natively supported by Felt252Dict<T>?","Making a dictionary of types not natively supported requires writing trait implementations to make the data type a valid dictionary value type."
"What is the difference between Option and Nullable<T>?","Option is a Cairo data type that can hold a single value or be empty, while Nullable<T> is a smart pointer that can point to a value of type T or be null."
"Why is it important to use Felt252DictValue<T> for dictionary values?","Using Felt252DictValue<T> for dictionary values ensures that a zero (default) value can be returned when a key is not found in the dictionary."
"What is the purpose of the BoxTrait::new method?","The BoxTrait::new method allocates a new memory segment and returns a Box<T> value pointing to that memory segment."
"What is the purpose of the ArrayTrait::new method?","The ArrayTrait::new method creates a new empty array of the given type."
"What is the purpose of the ArrayTrait::append method?","The ArrayTrait::append method adds a new element to the end of an array."
"What is the purpose of the Span<T>::at method?","The Span<T>::at method returns a reference to the element at the specified index in the span."
"What is the purpose of the Felt252Dict<T>::get method?","The Felt252Dict<T>::get method returns the value associated with the given key in the dictionary, or Felt252(0) if the key is not found."
"What is the purpose of the Felt252Dict<T>::insert method?","The Felt252Dict<T>::insert method adds or updates the value associated with the given key in the dictionary."
"What is the purpose of the Default::default method?","The Default::default method returns a new instance of a type with its default values."
"Why is it necessary to use a trait implementation to make a type a valid dictionary value type?","Using a trait implementation allows the compiler to check that the type has the required methods, such as the zero_default method."
"Why is it important to check if the value is null before unwrapping it?","Checking if the value is null before unwrapping it prevents a panic from occurring if the value is null."
"What is the zero_default method?","It is a method that returns a default value for a key that does not exist in the dictionary."
"What data types implement the Felt252DictValue trait?","It is implemented by common data types, such as most unsigned integers, bool and felt252."
"Which data types do not implement the Felt252DictValue trait?","Arrays, structures (including u256), and other types from the core library do not implement the Felt252DictValue trait."
"What is the Nullable<T> type?","A smart pointer type that can either point to a value or be null in the absence of the value."
"How is Nullable<T> used?","It is typically used in Object Oriented Programming Languages when a reference does not point anywhere."
"What is the difference between Nullable<T> and Option?","The wrapped value in Nullable<T> is stored inside a Box<T> data type, whereas in Option it is not."
"What is the Box<T> type?","A data type inspired by Cairo that allows allocation of a new memory segment for a type and enables access to the segment using a pointer that can only be manipulated in one place at a time."
"Why is the Box<T> type useful?","It is useful for allocating memory for a type and ensuring exclusive access to that memory."
"What is the purpose of the zero_default method?","To provide a default value for a key that does not exist in the dictionary."
" store a Span<felt252> inside a dictionary. For that, use Nullable<T> and Box<T>","
use core::dict::Felt252DictTrait;
use core::nullable::{nullable_from_box, match_nullable, FromNullableResult};
use core::panic_with_felt252;

fn main() {
    // Create the dictionary
    let mut d: Felt252Dict<Nullable<Span<felt252>>> = Default::default();

    // Crate the array to insert
    let mut a = ArrayTrait::new();
    a.append(8);
    a.append(9);
    a.append(10);

    // Insert it as a `Span`
    d.insert(0, nullable_from_box(BoxTrait::new(a.span())));
}

In this code snippet, the first thing we did was to create a new dictionary d. We want it to hold a Nullable<Span>. After that, we created an array and filled it with values.

The last step is inserting the array as a span inside the dictionary. Notice that we didn't do that directly, but instead, we took some steps in between:

We wrapped the array inside a Box using the new method from BoxTrait.
We wrapped the Box inside a nullable using the nullable_from_box function.
Finally, we inserted the result.
"
" store a Span<felt252> inside a dictionary and check the values stored","
use core::dict::Felt252DictTrait;
use core::nullable::{nullable_from_box, match_nullable, FromNullableResult};
use core::panic_with_felt252;

fn main() {
    // Create the dictionary
    let mut d: Felt252Dict<Nullable<Span<felt252>>> = Default::default();

    // Crate the array to insert
    let mut a = ArrayTrait::new();
    a.append(8);
    a.append(9);
    a.append(10);

    // Insert it as a `Span`
    d.insert(0, nullable_from_box(BoxTrait::new(a.span())));

    // Get value back
    let val = d.get(0);

    // Search the value and assert it is not null
    let span = match match_nullable(val) {
        FromNullableResult::Null(()) => panic_with_felt252('No value found'),
        FromNullableResult::NotNull(val) => val.unbox(),
    };

    // Verify we are having the right values
    assert(*span.at(0) == 8, 'Expecting 8');
    assert(*span.at(1) == 9, 'Expecting 9');
    assert(*span.at(2) == 10, 'Expecting 10');
}
"
"What constraints are required for type T to be a valid Felt252Dict<T> value type?","T should implement Copy<T>, Felt252DictValue<T>, and be destructible"
"Why did the compiler reject our UserDatabase implementation?","Because it didn't implement the Drop<T> or the Destruct<T> trait"
"What did we need to implement to make our database implementation fully functional?","The Destruct<T> trait"
"What does the squash() function do in our code?","It frees up the memory occupied by the Felt252Dict<T> instance, which is a requirement for dropping the UserDatabase<T> instance"
"Why do we need to implement the Destruct<T> trait manually if we could have used the Drop<T> trait?","Because the Drop<T> trait requires the type to implement the Copy<T> trait, which is not always the case for our generic type T"
"Implement a custom user database that will allow us to add users and query them using arrays","
struct UserDatabase<T> {
    users_amount: u64,
    balances: Felt252Dict<T>,
}

trait UserDatabaseTrait<T> {
    fn new() -> UserDatabase<T>;
    fn add_user<+Drop<T>>(ref self: UserDatabase<T>, name: felt252, balance: T);
    fn get_balance<+Copy<T>>(ref self: UserDatabase<T>, name: felt252) -> T;
}
impl UserDatabaseImpl<T, +Felt252DictValue<T>> of UserDatabaseTrait<T> {
    // Creates a database
    fn new() -> UserDatabase<T> {
        UserDatabase { users_amount: 0, balances: Default::default() }
    }

    // Get the user's balance
    fn get_balance<+Copy<T>>(ref self: UserDatabase<T>, name: felt252) -> T {
        self.balances.get(name)
    }

    // Add a user
    fn add_user<+Drop<T>>(ref self: UserDatabase<T>, name: felt252, balance: T) {
        self.balances.insert(name, balance);
        self.users_amount += 1;
    }
}

impl UserDatabaseDestruct<T, +Drop<T>, +Felt252DictValue<T>> of Destruct<UserDatabase<T>> {
    fn destruct(self: UserDatabase<T>) nopanic {
        self.balances.squash();
    }
}
"
" in this exemple, why do we need to implement the Destruct:
struct UserDatabase<T> {
    users_amount: u64,
    balances: Felt252Dict<T>,
}

trait UserDatabaseTrait<T> {
    fn new() -> UserDatabase<T>;
    fn add_user<+Drop<T>>(ref self: UserDatabase<T>, name: felt252, balance: T);
    fn get_balance<+Copy<T>>(ref self: UserDatabase<T>, name: felt252) -> T;
}
impl UserDatabaseImpl<T, +Felt252DictValue<T>> of UserDatabaseTrait<T> {
    // Creates a database
    fn new() -> UserDatabase<T> {
        UserDatabase { users_amount: 0, balances: Default::default() }
    }

    // Get the user's balance
    fn get_balance<+Copy<T>>(ref self: UserDatabase<T>, name: felt252) -> T {
        self.balances.get(name)
    }

    // Add a user
    fn add_user<+Drop<T>>(ref self: UserDatabase<T>, name: felt252, balance: T) {
        self.balances.insert(name, balance);
        self.users_amount += 1;
    }
}

impl UserDatabaseDestruct<T, +Drop<T>, +Felt252DictValue<T>> of Destruct<UserDatabase<T>> {
    fn destruct(self: UserDatabase<T>) nopanic {
        self.balances.squash();
    }
}","
the compiler doesn't know how to make a UserDatabase<T> go out of scope, since it doesn't implement the Drop<T> trait, nor the Destruct<T> trait. 
Since it has a Felt252Dict<T> as a member, it cannot be dropped, so we are forced to implement the Destruct<T> trait manually.
Using #[derive(Destruct)] on top of the UserDatabase<T> definition won't work because of the use of genericity in the struct definition.
We need to code the Destruct<T> trait implementation by ourselves"
