question,answer
"In cairo, a felt is a type of variable","true. a felt is a type of variable"
"is this program working in Cairo ?

 use debug::PrintTrait;

fn main() {
    let mut x: u64 = 2;
    x.print();
    x = 100_felt252;
    x.print()
}","no because you affect the wrong type to x on the line:
x = 100_felt252.
You will get the following error message:
error: Unexpected argument type. Expected: 'core::integer::u64', found: 'core::felt252'"
"Do I need to specify types for variables in Cairo ?","Cairo is a statically typed language, which means that it must know the types of all variables at compile time. The compiler can usually infer the desired type based on the value and its usage. In cases when many types are possible, we can use a cast method where we specify the desired output type."
"in Cairo, declare a felt252 of value 3","
```
    let x: felt252 = 3;
```
"
"in Cairo, declare a mut felt252 of value 31","let mut x: felt252 = 31;"
"in Cairo, declare a mutable felt252 of value 72","
```
 let mut x: felt252 = 72;
```
"
"in Cairo, declare a u32  of value 3","
```
 let x: u32  = 3;
```
"
"in Cairo, declare a mut u32  of value 31","
```
     let mut x: u32  = 31;
```
 "
"in Cairo, declare a mutable u32  of value 72","
```
    let mut x: u32  = 72;
```
"
"what are scalar types in Cairo ?","A scalar type represents a single value. Cairo has three primary scalar types: felts, integers, and booleans. You may recognize these from other programming languages"
"Is there a default type in cairo?","yes, it is felt252"
"What is the default type in Cairo","In Cairo, if you don't specify the type of a variable or argument, its type defaults to a field element, represented by the keyword felt252."
"what is a field element in Cairo ?","In the context of Cairo, when we say “a field element” we mean an integer in the range 0 <= x < P, where P is a very large prime number currently equal to P = 2^{251} + 17 * 2^{192}+1."
"Can overflow happens in Cairo ?","When adding, subtracting, or multiplying, if the result falls outside the specified range of the prime number, an overflow occurs, and an appropriate multiple of P is added or subtracted to bring the result back within the range (i.e., the result is computed modulo P)."
"What is the difference between an int and a field element in Cairo?","The most important difference between integers and field elements is division: Division of field elements (and therefore division in Cairo) is unlike regular CPUs division, where integer division x / y is defined as [x/y] where the integer part of the quotient is returned (so you get 7 / 3 = 2) and it may or may not satisfy the equation (x / y) * y == x, depending on the divisibility of x by y."
"Should I use int or field elements in Cairo ?"," it is highly recommended for programmers to use the integer types instead of the felt252 type whenever possible, as the integer types come with added security features that provide extra protection against potential vulnerabilities in the code, such as overflow checks."
"Why should i prefer int to field in Cairo ?"," By using these integer types, programmers can ensure that their programs are more secure and less susceptible to attacks or other security threats. An integer is a number without a fractional component. This type declaration indicates the number of bits the programmer can use to store the integer.
"
"can an int be negative in cairo ?","No, all int are unsigned"
"what is the size of u8 in Cairo ?","It is 8-bit long"
"what is the size of u16 in Cairo ?","It is 16-bit long"
"what is the size of u32 in Cairo ?","It is 32-bit long"
"what is the size of u64 in Cairo ?","It is 64-bit long"
"what is the size of u128 in Cairo ?","It is 128-bit long"
"what is the size of u256 in Cairo ?","It is 256-bit long"
"what is the size of usize in Cairo ?","It is 32-bit long"
"what is u8 in Cairo ?","It is an 8-bit long, unsigned int"
"what is u32 in Cairo ?","It is an 32-bit long, unsigned int"
"what is u64 in Cairo ?","It is an 64-bit long, unsigned int"
"what is u128 in Cairo ?","It is an 128-bit long, unsigned int"
"what is u16 in Cairo ?","It is an 16-bit long, unsigned int"
"what is u256 in Cairo ?","It is an 256-bit long, unsigned int"
"is this program working in Cairo ?
```
fn sub_u8s(x: u8, y: u8) -> u8 {
    x - y
}

fn main() {
    sub_u8s(1, 3);
}","No, x-y will give 1-3, which is negative, and the function returns an unsigned int, 8-bit long"
"affect the sum of 5 and 8 to a u128"," 
    // addition
    let sum = 5_u128 + 10_u128;
```    
"
"affect the subtraction of 95 and 4 to a u128","
```
    // subtraction
    let difference = 95_u128 - 4_u128;
```    
"
"affect the product of 4 and 30 to a u128","
```
     // multiplication
    let product = 4_u128 * 30_u128;
```    
"
"Affect the division quotient of 56 by 32 to a u128","
```
    // division
    let quotient = 56_u128 / 32_u128; //result is 1
```    
"
"Affect the division quotient of 64 by 32 to a u128","
```
    let quotient = 64_u128 / 32_u128; //result is 2
```
"
"Affect the division remainder  of 43 by 5 to a u128","
```
    let remainder = 43_u128 % 5_u128; // result is 3
```    
"
"What operation does Cairo supports on int ?","Cairo supports the basic mathematical operations you’d expect for all the integer types: addition, subtraction, multiplication, division, and remainder. Integer division truncates toward zero to the nearest integer."
"Does Cairo have bool ?","Boolean type in Cairo has two possible values: true and false. Booleans are one felt252 in size. The Boolean type in Cairo is specified using bool."
"Define t as a boolean with value true","
```
 fn main() {
    let t = true;
}
```
"
"define a bool f with explicit type, and set it to false","let f: bool = false; // with explicit type annotation"
"Does cairo supports strings","Cairo doesn't have a native type for strings, but you can store characters forming what we call a 'short string' inside felt252s. A short string has a max length of 31 chars. This is to ensure that it can fit in a single felt (a felt is 252 bits, one ASCII char is 8 bits). "
"define a short_string as char c","let my_char = 'C';"
"affect a variable to 'hello world'","let my_string = 'Hello world';"
"What is a tuple ?","A tuple is a general way of grouping together a number of values with a variety of types into one compound type. Tuples have a fixed length: once declared, they cannot grow or shrink in size."
"How do I create a tuple ?","We create a tuple by writing a comma-separated list of values inside parentheses. Each position in the tuple has a type, and the types of the different values in the tuple don’t have to be the same."
"write a tuple for a u32,u64 and a bool","
```
fn main() {
    let tup: (u32, u64, bool) = (10, 20, true);
}
```
"
"write a tuple for a u16, felt252 and a bool","
```
fn main() {
    let tup: (u16, felt252, bool) = (10, 20, true);
}
```
"
"how do I get the values from a tuple ?","The variable tup binds to the entire tuple because a tuple is considered a single compound element. To get the individual values out of a tuple, we can use pattern matching to destructure a tuple value"
"
```
get (x,y,z) from tup","
fn main() {
    let tup = (500, 6, true);
    let (x, y, z) = tup;
}
```
"
"write a program that defines a tuple, get the values (x,y,z) from it and print a message if y is equal to 6","use debug::PrintTrait;
```
 fn main() {
    let tup = (500, 6, true);

    let (x, y, z) = tup;

    if y == 6 {
        'y is six!'.print();
    }
}
```
"
"Can I declare a tuple with value and types at the same time ?","

Yes, we can !
```
    fn main() {
        let (x, y): (felt252, felt252) = (2, 3);
    }
```
"
"What is a unit type ?","A unit type is a type which has only one value (). It is represented by a tuple with no elements. Its size is always zero, and it is guaranteed to not exist in the compiled code.
"
"How do you define a function in Cairo ?","We define a function in Cairo by entering fn followed by a function name and a set of parentheses. The curly brackets tell the compiler where the function body begins and ends.
"
"what are function parameters or arguments ?","We can define functions to have parameters, which are special variables that are part of a function’s signature. When a function has parameters, you can provide it with concrete values for those parameters. Technically, the concrete values are called arguments, but in casual conversation, people tend to use the words parameter and argument interchangeably for either the variables in a function’s definition or the concrete values passed in when you call a function."
"Do I need to specify parameters type for a function ?","Yes !
In function signatures, you must declare the type of each parameter. This is a deliberate decision in Cairo’s design: requiring type annotations in function definitions means the compiler almost never needs you to use them elsewhere in the code to figure out what type you mean. The compiler is also able to give more helpful error messages if it knows what types the function expects.

When defining multiple parameters, separate the parameter declarations with commas"
"What is wrong with the declaration of this function:
    fn toto(a){
    }
","In function signatures, you must declare the type of each parameter.
A correction could be:
```
    fn toto(a:u32){ // choose the adequate type
    }
```
"
"What are named parameters ?","In Cairo, named parameters allow you to specify the names of arguments when you call a function. This makes the function calls more readable and self-descriptive. If you want to use named parameters, you need to specify the name of the parameter and the value you want to pass to it. The syntax is parameter_name: value. If you pass a variable that has the same name as the parameter, you can simply write :parameter_name instead of parameter_name: variable_name
"
"give an example of named parameters"," Surely, there you go:
```
    let first_arg = 3;
    let second_arg = 4;
    foo(x: first_arg, y: second_arg);
```
"
"Write a function that accepts 2 argmuents a and b"," 
```
    fn my_function(a:u32,b:u32)
    {
      returns a+b;
    }

    fn main()
    {
        my_function(a:1,b:3); // returns 4
    }
```

"
"explain this code: 
    let y = {
        let x = 3;
        x + 1;
    };
","
- The code between curly brackets is an expression: it has a value, which is 3+1 = 4
- y is set to 4
"