question,answer
"What are the rules that apply to ownership ?","
* Each value in Cairo has an owner.
* There can only be one owner at a time.
* When the owner goes out of scope, the value will be dropped.
"
"what will this code produce ?

fn foo(arr: Array<u128>) {}

fn bar(arr: Array<u128>) {}

fn main() {
    let mut arr = ArrayTrait::<u128>::new();
    foo(arr);
    bar(arr);
}
","we try to pass the same array instance arr by value to the functions foo and bar, which means that the parameter used in both function calls is the same instance of the array. If you append a value to the array in foo, and then try to append another value to the same array in bar, what would happen is that you would attempt to try to write to the same memory cell twice, which is not allowed in Cairo. To prevent this, the ownership of the arr variable moves from the main function to the foo function. When trying to call bar with arr as a parameter, the ownership of arr was already moved to the first call. The ownership system thus prevents us from using the same instance of arr in foo.

Running the code above will result in a compile-time error:


error: Variable was previously moved. Trait has no implementation in context: core::traits::Copy::<core::array::Array::<core::integer::u128>>
 --> array.cairo:6:9
    let mut arr = ArrayTrait::<u128>::new();
        ^*****^
"
"How can I avoid moving the ownership of a value to move to a function called with the value as parameter ?","
Use the copy trait on your data structure:
```
#[derive(Copy, Drop)]   // copy trait
struct Point {
    x: u128,
    y: u128,
}

fn main() {
    let p1 = Point { x: 5, y: 10 };
    foo(p1); // ownership not moved
    foo(p1); // ownership not moved
}

fn foo(p: Point) { // do something with p
}
```
"
"what does the Drop trait do ?","When a value of a type that implements the Drop trait goes out of scope, the Drop implementation is called on the type, which moves the value to the drop function, allowing it to go out of scope - This is what we call 'dropping' a value. It is important to note that the implementation of drop is a 'no-op', meaning that it doesn't perform any actions other than allowing the value to go out of scope."
"How do I add the drop trait to my structure","
```
    #[derive(Drop)]
    struct my_struct{
    }
```
 "
"implement the Drop trait on my struct Point:
struct Point {
    x: u128,
    y: u128,
}","
```
#[derive(Drop)]   // Drop trait
struct Point {
    x: u128,
    y: u128,
}
```
"
"implement ownership on my struct Point:
struct Point {
    x: u128,
    y: u128,
}","
```
#[derive(Copy, Drop)]   // implements Copy and Drop trait on Point
struct Point {
    x: u128,
    y: u128,
}
```
"
"Why is this code not working:

struct A {}

fn main() {
    A {}; // error: Value not dropped.
}
","
- The code will not compile, because the struct A is not moved before it goes out of scope:
- In Cairo, a value cannot go out of scope unless it has been previously moved. 
This is to ensure the soundness of Cairo programs. Soundness refers to the fact that if a statement during the execution of the program is false, no cheating prover can convince an honest verifier that it is true. In our case, we want to ensure the consistency of consecutive dictionary key updates during program execution, which is only checked when the dictionaries are squashed - which moves the ownership of the dictionary to the squash method, thus allowing the dictionary to go out of scope. Unsquashed dictionaries are dangerous, as a malicious prover could prove the correctness of inconsistent updates.

However, types that implement the Drop trait are allowed to go out of scope without being explicitly moved. When a value of a type that implements the Drop trait goes out of scope, the Drop implementation is called on the type, which moves the value to the drop function, allowing it to go out of scope - This is what we call 'dropping' a value. It is important to note that the implementation of drop is a 'no-op', meaning that it doesn't perform any actions other than allowing the value to go out of scope.
"
"Can I add #[derive(Drop)] to any value ?","
The Drop implementation can be derived for all types, allowing them to be dropped when going out of scope, except for dictionaries (Felt252Dict) and types containing dictionaries
"
"is the value of a variable that goes out of scope is dropped ?","
Yes.

When a variable goes out of scope, its value is dropped, unless ownership of the value has been moved to another variable
"
"What is a snapshot?","In Cairo, a snapshot is an immutable view of a value at a certain point in time. "
"create an array, and take a snapshot of it","
```
    let mut arr1 = ArrayTrait::<u128>::new();
    let first_snapshot = @arr1; // Take a snapshot of `arr1` at this point in time
```
"
"Create a function that calulates the length of an array, taking a snapshot as argument","
```
 fn calculate_length(
    array_snapshot: @Array<u128>
) -> usize { // array_snapshot is a snapshot of an Array
    array_snapshot.len()
} // Here, array_snapshot goes out of scope and is dropped.
// However, because it is only a view of what the original array `arr` contains, the original `arr` can still be used.
// the signature of the function uses @ to indicate that the type of the parameter arr is a snapshot.
```
 "
"Give an example of how to use snapshot instead or moving ownership","
Here is how you would define and use a calculate_length function that takes a snapshot to an array as a parameter instead of taking ownership of the underlying value. In this example, the calculate_length function returns the length of the array passed as parameter. As we're passing it as a snapshot, which is an immutable view of the array, we can be sure that the calculate_length function will not mutate the array, and ownership of the array is kept in the main function.
```
use debug::PrintTrait;

fn main() {
    let mut arr1 = ArrayTrait::<u128>::new();
    let first_snapshot = @arr1; // Take a snapshot of `arr1` at this point in time
    arr1.append(1); // Mutate `arr1` by appending a value
    let first_length = calculate_length(
        first_snapshot
    ); // Calculate the length of the array when the snapshot was taken
    //ANCHOR: function_call
    let second_length = calculate_length(@arr1); // Calculate the current length of the array
    //ANCHOR_END: function_call
    first_length.print();
    second_length.print();
}

fn calculate_length(arr: @Array<u128>) -> usize {
    arr.len()
}
```
"
"what is a desnap","To convert a snapshot back into a regular value, you can use the desnap operator *, which serves as the opposite of the @ operator: the snapshot value is copied to a new variable.

It's important to note that during this conversion process, the value it points to is copied into a new variable. This enables multiple uses of the underlying value without concerns about ownership transfers. This also means that the value pointed to by the snapshot must be copyable (which is not the case for Arrays, as they don't implement Copy).
"
"what is the keyword for desnap ?"," it is *:
    *my_var

 '*' in front of a variable does a desnap
"
"Give an example of desnap","
```
use debug::PrintTrait;

#[derive(Copy, Drop)]
struct Rectangle {
    height: u64,
    width: u64,
}

fn main() {
    let rec = Rectangle { height: 3, width: 10 };
    let area = calculate_area(@rec);
    area.print();
}

fn calculate_area(rec: @Rectangle) -> u64 {
    // As rec is a snapshot to a Rectangle, its fields are also snapshots of the fields types.
    // We need to transform the snapshots back into values using the desnap operator `*`.
    // This is only possible if the type is copyable, which is the case for u64.
    // Here, `*` is used for both multiplying the height and width and for desnapping the snapshots.
    *rec.height * *rec.width
}

// we want to calculate the area of a rectangle, but we don't want to take ownership of the rectangle in the calculate_area function, because we might want to use the rectangle again after the function call. Since our function doesn't mutate the rectangle instance, we can pass the snapshot of the rectangle to the function, and then transform the snapshots back into values using the desnap operator *"
"what are mutable references","Mutable references are actually mutable values passed to a function that are implicitly returned at the end of the function, returning ownership to the calling context. By doing so, they allow you to mutate the value passed while keeping ownership of it by returning it automatically at the end of the execution. "
