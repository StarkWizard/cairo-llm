question,answer
"To play chess, you need, to start game, spawn the pieces, and move around the board. The actions contract has two dominant functions spawn function which spawns the game entity,
places each piece in its proper position on the board and returns the game_id, and the move funtion which allows pieces to be moved around the board.
Write an interface for the actions contract on top of the code: move and spawn","
    use starknet::ContractAddress;
    use chess::models::piece::Vec2;
    #[starknet::interface]
    trait IActions<ContractState> {
        fn move(
            self: @ContractState,
            curr_position: Vec2,
            next_position: Vec2,
            caller: ContractAddress, //player
            game_id: u32
        );
        fn spawn(
            self: @ContractState, white_address: ContractAddress, black_address: ContractAddress
        ) -> u32;
    }
"
"Design the entities of a Dojo Chess game where Every square of the chess board (e.g., A1) will be treated as an entity.
 If a piece exists on a square position, that position will hold that piece.
 ","
First, add this basic player model to models/player.cairo file. 

```
use starknet::ContractAddress;

#[derive(Model, Drop, Serde)]
struct Player {
    #[key]
    game_id: u32,
    #[key]
    address: ContractAddress,
    color: Color
}
```

```
#[derive(Serde, Drop, Copy, PartialEq, Introspect)]
enum Color {
    White,
    Black,
    None,
}
```

Second, we do the same for game model. Edit your models/player.cairo file and add this content.

```
use chess::models::player::Color;
use starknet::ContractAddress;

#[derive(Model, Drop, Serde)]
struct Game {
    #[key]
    game_id: u32,
    winner: Color,
    white: ContractAddress,
    black: ContractAddress
}

#[derive(Model, Drop, Serde)]
struct GameTurn {
    #[key]
    game_id: u32,
    player_color: Color
}
```

Lastly we create piece model in our models/player.cairo file.

```
use chess::models::player::Color;
use starknet::ContractAddress;

#[derive(Model, Drop, Serde)]
struct Piece {
    #[key]
    game_id: u32,
    #[key]
    position: Vec2,
    color: Color,
    piece_type: PieceType,
}

#[derive(Copy, Drop, Serde, Introspect)]
struct Vec2 {
    x: u32,
    y: u32
}

#[derive(Serde, Drop, Copy, PartialEq, Introspect)]
enum PieceType {
    Pawn,
    Knight,
    Bishop,
    Rook,
    Queen,
    King,
    None,
}
```
"
"Implement the following traits for a Chess Game, using Dojo
trait GameTurnTrait {
    fn next_turn(self: @GameTurn) -> Color;
}

trait PlayerTrait {
fn is_not_my_piece(self: @Player, piece_color: Color) -> bool;
}

trait PieceTrait {
fn is_out_of_board(next_position: Vec2) -> bool;
fn is_right_piece_move(self: @Piece, next_position: Vec2) -> bool;
}
","
// code for player.cairo file
trait PlayerTrait {
    fn is_not_my_piece(self: @Player, piece_color: Color) -> bool;
}

impl PalyerImpl of PlayerTrait {
    fn is_not_my_piece(self: @Player, piece_color: Color) -> bool {
        *self.color != piece_color
    }
}

// code for game.cairo file
trait GameTurnTrait {
    fn next_turn(self: @GameTurn) -> Color;
}
impl GameTurnImpl of GameTurnTrait {
    fn next_turn(self: @GameTurn) -> Color {
        match self.player_color {
            Color::White => Color::Black,
            Color::Black => Color::White,
            Color::None => panic(array!['Illegal turn'])
        }
    }
}

// code for piece.cairo file
trait PieceTrait {
    fn is_out_of_board(next_position: Vec2) -> bool;
    fn is_right_piece_move(self: @Piece, next_position: Vec2) -> bool;
}

impl PieceImpl of PieceTrait {
    fn is_out_of_board(next_position: Vec2) -> bool {
        next_position.x > 7 || next_position.y > 7
    }

    fn is_right_piece_move(self: @Piece, next_position: Vec2) -> bool {
        let n_x = next_position.x;
        let n_y = next_position.y;
        assert(!(n_x == *self.position.x && n_y == *self.position.y), 'Cannot move same position');
        match self.piece_type {
            PieceType::Pawn => {
                match self.color {
                    Color::White => {
                        (n_x == *self.position.x && n_y == *self.position.y + 1)
                            || (n_x == *self.position.x && n_y == *self.position.y + 2)
                            || (n_x == *self.position.x + 1 && n_y == *self.position.y + 1)
                            || (n_x == *self.position.x - 1 && n_y == *self.position.y + 1)
                    },
                    Color::Black => {
                        (n_x == *self.position.x && n_y == *self.position.y - 1)
                            || (n_x == *self.position.x && n_y == *self.position.y - 2)
                            || (n_x == *self.position.x + 1 && n_y == *self.position.y - 1)
                            || (n_x == *self.position.x - 1 && n_y == *self.position.y - 1)
                    },
                    Color::None => panic(array!['Should not move empty piece']),
                }
            },
            PieceType::Knight => { n_x == *self.position.x + 2 && n_y == *self.position.y + 1 },
            PieceType::Bishop => {
                (n_x <= *self.position.x && n_y <= *self.position.y && *self.position.y
                    - n_y == *self.position.x
                    - n_x)
                    || (n_x <= *self.position.x && n_y >= *self.position.y && *self.position.y
                        - n_y == *self.position.x
                        - n_x)
                    || (n_x >= *self.position.x && n_y <= *self.position.y && *self.position.y
                        - n_y == *self.position.x
                        - n_x)
                    || (n_x >= *self.position.x && n_y >= *self.position.y && *self.position.y
                        - n_y == *self.position.x
                        - n_x)
            },
            PieceType::Rook => {
                (n_x == *self.position.x || n_y != *self.position.y)
                    || (n_x != *self.position.x || n_y == *self.position.y)
            },
            PieceType::Queen => {
                (n_x == *self.position.x || n_y != *self.position.y)
                    || (n_x != *self.position.x || n_y == *self.position.y)
                    || (n_x != *self.position.x || n_y != *self.position.y)
            },
            PieceType::King => {
                (n_x <= *self.position.x + 1 && n_y <= *self.position.y + 1)
                    || (n_x <= *self.position.x + 1 && n_y <= *self.position.y - 1)
                    || (n_x <= *self.position.x - 1 && n_y <= *self.position.y + 1)
                    || (n_x <= *self.position.x - 1 && n_y <= *self.position.y - 1)
            },
            PieceType::None => panic(array!['Should not move empty piece']),
        }
    }
}
"
