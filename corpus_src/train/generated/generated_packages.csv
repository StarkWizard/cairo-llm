question,answer
"How can code organization benefit large programs?","By grouping related functionality and separating code with distinct features to clarify where to find or change a particular feature."
"In a small project, where are the programs typically written?","In one module in one file."
"As a project becomes larger, how should one organize the code?","By splitting it into multiple modules and then multiple files."
"What can be done as a package grows?","Extract parts into separate crates that become external dependencies."
"What does encapsulating implementation details enable?","It lets you reuse code at a higher level and allows other code to call your code without knowing how the implementation works."
"How is 'scope' defined in the context of coding?","The nested context in which code is written with a set of names defined as “in scope”."
"Why do programmers and compilers need to understand scope?","To know whether a particular name at a spot refers to a variable, function, struct, enum, module, constant, or other item and its meaning."
"What limitation does scope impose on naming?","You can't have two items with the same name in the same scope."
"How is Cairo's module system often described?","A number of features that allow you to manage your code’s organization."
"What purpose does the 'Packages' feature serve in Cairo?","It lets you build, test, and share crates."
"How can 'Crates' be described?","A tree of modules that corresponds to a single compilation unit with a root directory and a root module defined at the file lib.cairo under this directory."
"What functionality do 'Modules and use' provide in Cairo?","They let you control the organization and scope of items."
"How are items, like functions or modules, named in Cairo?","Using Paths."
"In Cairo, where is the root module of a crate defined?","In the file lib.cairo under its root directory."
"Why is it important to encapsulate implementation details?","So that other code can call your code without having to know how the implementation works."
"How can code readability and maintainability be improved?","By organizing code, grouping related functionality, and separating code with distinct features."
"How do 'Packages' relate to 'Crates' in Cairo?","Packages let you build, test, and share crates."
"In the context of Cairo's module system, what are Paths used for?","For naming items such as structs, functions, or modules."
"How do modules aid in code organization in larger projects?","They allow you to split and separate code, making it easier to manage and understand."
"How does a compiler consider the smallest amount of code?","A crate."
"If you pass a single source code file to cairo-compile, how does the compiler consider that file?","The compiler considers that file to be a crate."
"What can a crate contain?","Modules."
"Can modules inside a crate be defined in other files?","Yes."
"What source file does the Cairo compiler start from?","lib.cairo."
"What is the significance of the lib.cairo file in a crate?","It makes up the root module of your crate."
"What does a Cairo package bundle together?","One or more crates with a Scarb.toml file."
"What's the purpose of a Scarb.toml file in a package?","It describes how to build those crates."
"How can you create a new Cairo package?","Using the scarb command-line tool."
"What command would you use to create a package named 'my_package'?","scarb new my_package."
"What gets generated when you run the command to create a new package?","A new package directory with a specific structure including Scarb.toml and lib.cairo."
"What is the main directory where Cairo source files for a package are stored?","src/."
"What is the default root module of the crate in a package?","lib.cairo."
"What is the main entry point of the package?","lib.cairo."
"What does the Scarb.toml file in a package contain?","Metadata and configuration options for the package."
"Can you find documentation about Scarb.toml in the scarb reference?","Yes."
"What section in the Scarb.toml specifies the package's name and version?","[package]."
"Where can you specify the dependencies of a package in Scarb.toml?","[dependencies] section."
"If you wanted to add more Cairo source files to your package, where would you place them?","Within the src directory or its subdirectories."
"What kind of files would you create to organize your code into multiple Cairo source files?",".cairo files."
"Is lib.cairo always the main entry point of the package?","Yes, it's the default root module of the crate."
"How do you specify package dependencies in the Scarb.toml?","In the [dependencies] section."
"What file contains metadata like the package name, version, and authors?","Scarb.toml."
"What is the primary purpose of splitting code into smaller parts within Cairo packages?","It facilitates more structured dependency management and allows code to be reusable."
"What command-line tool is used to create a new Cairo package?","scarb."
"What is the significance of the src directory in a Cairo package?","It's where all the Cairo source files for the package are stored."
"How can you define the build process of crates within a Cairo package?","Using the Scarb.toml file."
"What does the [package] section in Scarb.toml define?","Metadata like the package's name and version."
"Where can you define dependencies for your Cairo package?","In the [dependencies] section of Scarb.toml."
"Is the lib.cairo file always present in the src directory of a new Cairo package?","Yes, it's the default root module of the crate and the main entry point of the package."
"How does the Cairo compiler treat a single source code file passed to cairo-compile?","It considers that file to be a crate."
"What facilitates more structured dependency management in Cairo?","A cairo package."
"How can you diversify the organization of your Cairo package code?","By creating additional .cairo files within the src directory or its subdirectories."
"How does the Cairo compiler start the compilation process for a crate?","It starts from the lib.cairo source file."
"What section in Scarb.toml can you find the package's name?","[package]."
"If you want to reference the scarb tool's documentation, where can you find it?","On the scarb reference."
"What kind of files can crates contain?","Modules."
"Is the crate root always named lib.cairo?","Yes, it's the default name for the crate root."
"Can a crate contain multiple modules?","Yes."
"What does the Scarb.toml file describe in a Cairo package?","How to build those crates."
"What is the primary role of the scarb command-line tool?","To create a new Cairo package."
"How is the structure of a new Cairo package typically organized?","With a Scarb.toml, src directory, and lib.cairo as the default root module of the crate."
"Where are additional Cairo source files placed in a Cairo package?","Within the src directory or its subdirectories."
"What is the function of the lib.cairo file in a Cairo package?","It's the main entry point of the package and the default root module of the crate."
"What is considered the smallest unit of code by the Cairo compiler?","A crate."
"Is it possible to split code into smaller, reusable parts using Cairo packages?","Yes."
"Which tool allows you to create new Cairo packages?","The scarb command-line tool."
"What is the smallest unit of code that the Cairo compiler considers?","A crate."
"Which command is used to compile a crate without building it?","cairo-compile."
"Can crates contain modules?","Yes, crates can contain modules."
"How are modules within a crate possibly defined?","Modules may be defined in other files that get compiled with the crate."
"What is the starting point for the Cairo compiler when compiling a crate?","The crate root."
"What is the name of the source file that serves as the crate root?","lib.cairo."
"What role does the crate root play in your crate?","It makes up the root module of the crate."
"What is a Cairo package?","A bundle of one or more crates with a Scarb.toml file that describes how to build those crates."
"What advantage does splitting code into packages provide?","It allows code to be split into smaller, reusable parts and facilitates more structured dependency management."
"Which tool can you use to create a new Cairo package?","The scarb command-line tool."
"How do you create a new Cairo package named 'my_package'?","By running the command 'scarb new my_package'."
"What is the primary directory for storing Cairo source files in a package?","src/"
"What role does the lib.cairo file play in a package?","It is the default root module of the crate and the main entry point of the package."
"What information does the Scarb.toml file contain?","Metadata and configuration options for the package, such as dependencies, package name, version, and authors."
"Where can one find documentation about Scarb.toml?","On the scarb reference."
"How is the package name defined in the Scarb.toml file?","Using the 'name' attribute, for example: 'name = 'my_package''."
"How can you specify the version of a package in Scarb.toml?","Using the 'version' attribute, for example: 'version = '0.1.0''."
"Where would you define dependencies for a Cairo package?","Within the '[dependencies]' section of the Scarb.toml file."
"How can you organize your Cairo package when you want to add more source files?","By creating additional .cairo files within the src directory or its subdirectories."
"What kind of files are considered when compiling a crate in the Cairo language?","Source code files."
"What is the significance of the Scarb.toml file in a Cairo package?","It describes how to build the crates within the package."
"Is it possible for a single package to contain multiple crates?","Yes."
"How does the Cairo compiler view a single source code file?","As a crate."
"Is the crate root always named 'lib.cairo'?","No, but 'lib.cairo' is the default name for the crate root in the context provided."
"How can you define dependencies in Scarb.toml?","Using the '[dependencies]' section and specifying each dependency, for example: '# foo = { path = 'Vendor/foo' }'."
"How are modules related to crates in Cairo?","Crates can contain modules."
"How can developers structure their Cairo code?","By organizing them into packages and crates."
"What does the 'scarb new' command do?","It creates a new Cairo package."
"What kind of files can you find inside the 'src' directory of a Cairo package?","Cairo source files, with the .cairo extension."
"Why is dependency management important in software development?","It facilitates structured management of external code or libraries that a project relies on."
"How can you reference a local dependency in the Scarb.toml file?","Using the path attribute, for example: 'foo = { path = 'vendor/foo' }'."
"What would you expect to find inside a newly created 'my_package' directory?","A Scarb.toml file and a src directory containing a lib.cairo file."
"How are crates related to packages in the Cairo language?","A package is a bundle of one or more crates."
"What facilitates the splitting of code into smaller parts in Cairo?","Packages."
"How does one define the root module of a crate?","Through the crate root, which is often the lib.cairo source file."
"What tool is mentioned for building and managing Cairo packages?","The scarb command-line tool."
"How is a package's metadata specified?","In the Scarb.toml file."
"How does the compiler view the relationship between a single source code file and a crate?","It considers that file to be a crate."
"What is a common way to structure code in larger Cairo projects?","Organizing code into multiple Cairo source files within the src directory or its subdirectories."
"What is the main purpose of the Scarb.toml file?","To describe how to build the crates within a Cairo package and provide metadata and configuration options for the package."
"How can one specify the name of a Cairo package?","In the Scarb.toml file using the 'name' attribute."
"How does the Cairo compiler determine which source file to start from when compiling?","It starts from the crate root."
"Where is the main entry point of a Cairo package typically located?","In the lib.cairo file inside the src directory."
"Which tool would you use to compile a single source code file in Cairo?","cairo-compile."
"How can developers enhance the modularity of their Cairo code?","By creating packages, splitting code into multiple crates, and organizing code into modules."
"How can developers reference other files or libraries their Cairo project depends on?","By defining them in the '[dependencies]' section of the Scarb.toml file."
