question,answer
"How can you organize your code when modules get large in size?","You might want to move their definitions to a separate file to make the code easier to navigate."
"Given the code 'use restaurant::front_of_house::hosting;', how would you call the 'add_to_waitlist' function?","You would call it using 'hosting::add_to_waitlist();'."
"Why would the code not compile after removing the body of 'front_of_house' module but keeping its declaration?","It won’t compile until you create the 'src/front_of_house.cairo' file with the module's definitions."
"How does the compiler know where to find the definitions for a module?","The compiler knows to look in a file with the same name as the module due to the module declaration in the crate root."
"Do you need to load a file multiple times with 'mod' declarations in your module tree?","No, you only need to load a file using a 'mod' declaration once in your module tree."
"Is the 'mod' keyword equivalent to the 'include' operation seen in other programming languages?","No, 'mod' is not an 'include' operation that you may have seen in other programming languages."
"What is the significance of the directory structure in relation to the module tree?","The directories and files should closely match the module tree based on the compiler's rules for which files to check for which modules' code."
"If 'hosting.cairo' is placed in the 'src' directory, where would the compiler expect the module declaration?","The compiler would expect the 'hosting.cairo' code to be in a 'hosting' module declared in the crate root, and not as a child of the 'front_of_house' module."
"How does moving module's code to separate files impact function calls like in 'eat_at_restaurant'?","The function calls in 'eat_at_restaurant' will work without any modification, even if the definitions are in different files."
"What is the purpose of the 'use' keyword in 'use restaurant::front_of_house::hosting'?","The 'use' keyword brings paths into scope so you can use a shorter path for multiple uses of the item in that scope."
"What role does the 'mod' keyword serve in relation to the Cairo compiler?","The 'mod' keyword declares modules, and Cairo looks in a file with the same name as the module for the code that goes into that module."
"How does Cairo help in organizing code in packages and crates?","Cairo lets you split a package into multiple crates and a crate into modules."
"How can you refer to items defined in one module from another?","You can refer to them by specifying absolute or relative paths."
"By default, is module code public or private?","Module code is public by default."
"What is the implication of the mod statement in relation to the module tree?","The mod statement tells the compiler where in the module tree the code resides."
"Where should you place the file for the 'hosting' module if it's a child of 'front_of_house'?","You should place it in the 'src/front_of_house/' directory."
"What should the content of 'src/front_of_house.cairo' be when only declaring the 'hosting' module?","The content should be 'mod hosting;'."
"How do the compiler’s rules regarding files and directories relate to the module tree?","The directories and files should closely match the module tree based on the compiler's rules."
"Why is it beneficial to split a package into multiple crates and modules?","It makes code organization clearer and allows for easier reference of items across modules."
"What happens if you remove the code inside the curly brackets for the 'front_of_house' module but keep the declaration?","src/lib.cairo' will only contain the 'mod front_of_house;' declaration, and the code won’t compile until the 'src/front_of_house.cairo' file is created."
"How does the compiler react to the module declaration in the crate root?","It looks in a file with the same name as the module for its definitions."
"When organizing modules into separate files, does the module tree change?","No, the module tree remains the same even after moving each module’s code to a separate file."
"Which keyword is used to declare modules in Cairo?","The 'mod' keyword is used to declare modules in Cairo."
"If you declare a module in the crate root with a specific name, where does the Cairo compiler look for the code of that module?","Cairo looks in a file with the same name as the module for the code."
"What's the main purpose of specifying paths using the 'use' keyword?","The main purpose is to bring paths into scope so that you can use a shorter path for multiple uses of an item in that scope."
"How does Cairo handle code visibility in modules by default?","In Cairo, module code is public by default."
"Is it necessary to change the 'use' statement in 'src/lib.cairo' after moving module's code to separate files?","No, the 'use' statement in 'src/lib.cairo' doesn’t need to change and has no impact on what files are compiled as part of the crate."
"What is the impact of moving modules to new files as they grow in size in terms of function calls?","Function calls will work without any modification, even though the definitions live in different files."
"Why is the 'mod' statement important for the compiler's understanding of the project structure?","The 'mod' statement informs the compiler about where in the module tree the code resides and which file to look into for the module's definitions."
"What do you understand by 'Cairo looks in a file with the same name as the module'?","It means that if you declare a module, the Cairo compiler expects to find the module's definitions in a file that has the same name as the declared module."
"What does the 'src/lib.cairo' file indicate with the code 'mod front_of_house;'?","It indicates the declaration of the 'front_of_house' module, and its definitions are expected in a separate file named 'front_of_house.cairo'."
"What happens when modules grow in size in terms of code organization?","You might want to move their definitions to separate files to keep the code organized and easier to navigate."
"In the statement 'use restaurant::front_of_house::hosting;', what is being brought into scope?","The 'hosting' module from 'restaurant::front_of_house' is being brought into scope."
"How do you call a function from a module that has been brought into scope with a 'use' statement?","You can call the function using a shorter path, like 'hosting::function_name();'."
"When extracting a child module to its own file, where should the file be placed in relation to its parent module?","The file should be placed in a directory named for its ancestors in the module tree."
"What is the significance of the crate root file in terms of module declarations?","The crate root file can contain module declarations, and the compiler checks files with the same name as the declared modules for their definitions."
"how do you indicate the body of a module when declaring it in a separate file?","You remove the code inside the curly brackets for the module, leaving only the 'mod module_name;' declaration in the main file."
"Why is it not recommended to put 'hosting.cairo' in the 'src' directory if it's a child of 'front_of_house'?","Because the compiler would expect the 'hosting.cairo' code to be in a 'hosting' module declared in the crate root, not as a child of 'front_of_house'."
"What concept allows you to move modules to separate files without affecting function calls?","The way Cairo manages module trees and paths allows this flexibility."
"What keyword is used to load a file into a module tree?","The 'mod' keyword is used to load a file into the module tree."
"What would happen if you try to compile after declaring a module but before creating its corresponding file?","The code won't compile."
"how are paths used to refer to items in a module tree?","Paths can be absolute or relative and are used to refer to items in a module tree."
"Which keyword is responsible for bringing paths into scope in Cairo?","The 'use' keyword is responsible for bringing paths into scope."
"How is code visibility managed in Cairo by default?","In Cairo, module code is public by default."
"How do you declare a module in Cairo without providing its body within the same file?","mod front_of_house;"
"In the provided code, which function is being called from the 'hosting' module?","
```
    hosting::add_to_waitlist();
```
"
"How can you define a module with its body inside the same file in Cairo?","
```
    mod hosting {
        fn add_to_waitlist() {
        }
    }
```
"
"When you only want to declare the 'hosting' module in 'src/front_of_house.cairo', how should the file look?","
```
    mod hosting;
```"
"How can you define a function 'add_to_waitlist' inside a file named 'hosting.cairo'?","
```
    fn add_to_waitlist() {
    }
```"
"How would you use the 'hosting' module from 'restaurant::front_of_house' in your code?","use
```
    restaurant::front_of_house::hosting;
```
"
"How do you define the 'front_of_house' module, which will have its body in a separate file named 'src/front_of_house.cairo'?","
```
    mod front_of_house;
```
"
"Based on the provided code, if you have a 'mod hosting;' declaration in one file, how would the content of the 'hosting' module look in its respective file?","
```
    mod hosting {
        fn add_to_waitlist()
        {}
    }
```
"
"How do you declare a function named 'add_to_waitlist' in Cairo?","
```
    fn add_to_waitlist() {
        // your code here
    }
"
