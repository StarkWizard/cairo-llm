question,answer
"How are structs similar to tuples?","Both hold multiple related values."
"Do structs allow values of different data types?","Yes."
"How does naming pieces of data in a struct compare to tuples?","In a struct, each piece of data is named, while tuples do not have named data."
"Why are structs considered more flexible than tuples?","Structs are more flexible because you don’t have to rely on the order of the data to specify or access the values of an instance."
"What is the keyword to define a struct?","struct"
"How should a struct's name be chosen?","A struct’s name should describe the significance of the pieces of data being grouped together."
"What are the names and types of data in a struct called?","fields"
"Write a code snippet that defines a struct named 'User'.","
```
    struct User {
        active: bool,
        username: felt252,
        email: felt252,
        sign_in_count: u64,
    }
```
"
"How do you create an instance of a struct?","By stating the name of the struct and then adding curly brackets containing key: value pairs."
"Do the fields need to be specified in the same order as in the struct definition when creating an instance?","No."
"How do you access a specific value from a struct instance?","By using dot notation."
"How can you change the value of a field in a mutable struct instance?","Using the dot notation and assigning a new value to the particular field."
"Is it possible to make only certain fields of a struct mutable?","No."
"What does Cairo not allow regarding mutability of struct fields?","Cairo doesn’t allow marking only certain fields as mutable."
"How can you implicitly return a new instance of a struct in a function?","By constructing a new instance of the struct as the last expression in the function body."
"Write a code snippet that defines a function 'build_user' returning a 'User' instance.","
```
    fn build_user(email: felt252, username: felt252) -> User {
        User {
            active: true,
            username: username,
            email: email,
            sign_in_count: 1,
        }
    }"
"Why might it be considered tedious to repeat field names and variables in a function like 'build_user'?","Because having to repeat the field names and variables can be redundant, especially if the struct had more fields."
"What is the field init shorthand?","A syntax where if the parameter names and the struct field names are the same, you can avoid repetition by only mentioning the name once."
"Write a code snippet that demonstrates the use of field init shorthand in a function returning a 'User' instance.","
```
    fn build_user_short(email: felt252, username: felt252) -> User {
        User {
            active: true,
            username,
            email,
            sign_in_count: 1,
        }
    }
```
"
"How does the field init shorthand benefit the code?","It reduces repetition and makes the code more concise when the parameter names and the struct field names are the same."
"What is the purpose of naming each piece of data in a struct?","So it’s clear what the values mean."
"How can you specify values for a struct instance?","By adding curly brackets containing key: value pairs after the struct name."
"What is the significance of the order of data in tuples?","In tuples, you have to rely on the order of the data to specify or access the values."
"How do you define the fields inside a struct?","Inside curly brackets, you define the names and types of the pieces of data."
"Is it necessary for the entire struct instance to be mutable to change a field value?","Yes."
"How is a struct definition different from its instances?","The struct definition is a general template for the type, while instances fill in that template with particular data to create values of the type."
"How can you make a 'User' instance mutable?","By prefixing the instance declaration with 'let mut'."
"How would you change the 'email' field of 'user1' to 'anotheremail@example.com'?","user1.email = 'anotheremail@example.com';"
"In what scenario can you avoid writing 'email: email' in a struct instantiation?","When using the field init shorthand and the parameter name is the same as the struct field name."
"How does Cairo handle mutability in structs?","The entire instance must be mutable; Cairo doesn’t allow marking only certain fields as mutable."
"In what situation would you use the 'build_user_short' function?","When you want to create a 'User' instance using the field init shorthand."
"What is the purpose of the 'fn main()' in the code snippets?","It is the main function where the code execution begins."
"How are structs similar to tuples, as in the concept of holding values?","Both hold multiple related values."
"In a struct like 'struct User { active: bool, username: felt252, email: felt252, sign_in_count: u64, }', can it hold values of different data types?","Yes."
"In comparison to tuples, how does naming data pieces in a struct such as 'struct User { active: bool, ... }' work?","In a struct, each piece of data is named, while tuples do not have named data."
"Considering a struct like 'struct User {...}', why might it be considered more flexible than a tuple?","Structs are more flexible because you don’t have to rely on the order of the data to specify or access the values of an instance."
"To define a data structure like 'struct User {...}', what keyword would you use?","struct"
"Given a 'struct User {...}', how should its name be chosen?","A struct’s name should describe the significance of the pieces of data being grouped together."
"In a struct definition like 'struct User { active: bool, ... }', what are 'active', 'username', etc. called?","fields"
"Provide a basic code snippet that defines a struct named 'User' with fields like 'active', 'username', and so on.","
```
    struct User {
        active: bool,
        username: felt252,
        email: felt252,
        sign_in_count: u64,
    }
```
"
"If you have a struct named 'User' defined as 'struct User {...}', how would you create its instance?","By stating the name of the struct and then adding curly brackets containing key: value pairs."
"When creating an instance of a struct like 'User {...}', is it mandatory to specify the fields in the same order as in its definition?","No."
"To access a specific value from a struct instance like 'user1' in 'let user1 = User {...}', how would you proceed?","By using dot notation."
"Given a mutable struct instance like 'let mut user1 = User {...}', how can you change a field's value?","Using the dot notation and assigning a new value to the particular field."
"In a programming environment like Cairo, if you have a mutable struct instance 'let mut user1 = User {...}', can you make only certain fields mutable?","No."
"What restriction does Cairo place on making fields of a struct like 'User {...}' mutable?","Cairo doesn’t allow marking only certain fields as mutable."
"Given a function that ends with a struct instantiation like 'User {...}', how can you implicitly return this new struct instance?","By constructing a new instance of the struct as the last expression in the function body."
"Provide a code definition of a function named 'build_user' that returns an instance of a 'User' struct.","fn build_user(email: felt252, username: felt252) -> User {\n    User { active: true, username: username, email: email, sign_in_count: 1, }\n}"
"Why might it be considered repetitive to name function parameters and struct fields the same, like in 'fn build_user(email: felt252, username: felt252) -> User { User { ... email: email, username: username ... } }'?","Because having to repeat the field names and variables can be redundant, especially if the struct had more fields."
"In a function like 'fn build_user(email: felt252, username: felt252) -> User {...}', what shorthand allows avoiding the repetition of field names and variable names?","The field init shorthand."
"Given the function 'fn build_user(email: felt252, username: felt252) -> User {...}' and its shorter version using a shorthand, how do they differ?","'build_user_short' uses the field init shorthand to avoid repetition of field names and variables."
"How does the field init shorthand, as demonstrated in 'fn build_user_short(email: felt252, username: felt252) -> User { User { ... username, email, ... } }', simplify the code?","It reduces repetition and makes the code more concise when the parameter names and the struct field names are the same."
"In the struct definition 'struct User { active: bool, ... }', what is the data type of the 'active' field?","bool"
"What's the advantage of naming each data piece in a struct like 'struct User { active: bool, ... }'?","So it’s clear what the values mean."
"When specifying values for a struct instance like 'User {...}', how do you proceed?","By adding curly brackets containing key: value pairs after the struct name."
"Considering tuples and a struct like 'struct User {...}', how is the significance of the order of data in the two compared?","In tuples, you have to rely on the order of the data to specify or access the values."
"How do you define fields inside a struct like 'struct User {...}'?","Inside curly brackets, you define the names and types of the pieces of data."
"What data type does the 'sign_in_count' field have in the 'User' struct defined as 'struct User { ... sign_in_count: u64, ... }'?","u64"
"If you want to access the 'email' address of a 'User' instance like 'let user1 = User {...}', how would you write it?","user1.email"
"Given a mutable 'User' instance as 'let mut user1 = User {...}', how would you modify its 'email' field?","By using the dot notation like 'user1.email = 'newemail@example.com';'"
"Is the entire struct instance like 'User {...}' required to be mutable to modify its fields in Cairo?","Yes."
"How does Cairo handle mutability in structs when you want to change field values?","The entire instance must be mutable; Cairo doesn’t allow marking only certain fields as mutable."
"If you have a function 'build_user_short' that uses a shorthand to initialize a 'User' struct, when would you use it?","When you want to create a 'User' instance using the field init shorthand."
