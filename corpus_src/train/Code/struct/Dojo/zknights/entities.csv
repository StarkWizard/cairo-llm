question,answer
"use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::foe::FoeTrait;

#[derive(Copy, Drop)]
struct Barbarian {
    health: u8,
}

impl BarbarianImpl of FoeTrait<Barbarian> {
    #[inline(always)]
    fn new(health: u8, _type: u8) -> Barbarian {
        Barbarian { health: health }
    }

    #[inline(always)]
    fn can_attack(self: Barbarian, tile: Tile, target: Tile) -> bool {
        tile.distance(target) == 1 && self.health > 0
    }

    #[inline(always)]
    fn can_move(self: Barbarian) -> bool {
        self.health > 0
    }

    #[inline(always)]
    fn compute_score(self: Barbarian, tile: Tile, target: Tile) -> u32 {
        tile.distance(target)
    }

    #[inline(always)]
    fn get_hits(self: Barbarian, tile: Tile, target: Tile, size: u32) -> Span<u32> {
        let mut hits: Array<u32> = array![];
        if !self.can_attack(tile, target) {
            return hits.span();
        };
        hits.append(target.index.into());
        hits.span()
    }

    fn next(
        self: Barbarian, tile: Tile, target: Tile, size: u32, ref neighbors: Span<Tile>
    ) -> u32 {
        // [Compute] Current tile score
        let mut result = tile;
        let mut score = self.compute_score(tile, target);

        // [Compute] Lowest score tile
        loop {
            match neighbors.pop_front() {
                Option::Some(neighbor) => {
                    let new_tile = *neighbor;
                    let new_score = self.compute_score(new_tile, target);
                    if new_score < score {
                        score = new_score;
                        result = new_tile;
                    };
                },
                Option::None => {
                    break;
                },
            };
        };

        result.index
    }
}","
use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::foe::FoeTrait;

#[derive(Copy, Drop)]
struct Barbarian {
    health: u8,
}

impl BarbarianImpl of FoeTrait<Barbarian> {
    #[inline(always)]
    fn new(health: u8, _type: u8) -> Barbarian {
        Barbarian { health: health }
    }

    #[inline(always)]
    fn can_attack(self: Barbarian, tile: Tile, target: Tile) -> bool {
        tile.distance(target) == 1 && self.health > 0
    }

    #[inline(always)]
    fn can_move(self: Barbarian) -> bool {
        self.health > 0
    }

    #[inline(always)]
    fn compute_score(self: Barbarian, tile: Tile, target: Tile) -> u32 {
        tile.distance(target)
    }

    #[inline(always)]
    fn get_hits(self: Barbarian, tile: Tile, target: Tile, size: u32) -> Span<u32> {
        let mut hits: Array<u32> = array![];
        if !self.can_attack(tile, target) {
            return hits.span();
        };
        hits.append(target.index.into());
        hits.span()
    }

    fn next(
        self: Barbarian, tile: Tile, target: Tile, size: u32, ref neighbors: Span<Tile>
    ) -> u32 {
        // [Compute] Current tile score
        let mut result = tile;
        let mut score = self.compute_score(tile, target);

        // [Compute] Lowest score tile
        loop {
            match neighbors.pop_front() {
                Option::Some(neighbor) => {
                    let new_tile = *neighbor;
                    let new_score = self.compute_score(new_tile, target);
                    if new_score < score {
                        score = new_score;
                        result = new_tile;
                    };
                },
                Option::None => {
                    break;
                },
            };
        };

        result.index
    }
}

#[cfg(test)]
mod tests {
    // Core imports

    use debug::PrintTrait;

    // Internal imports

    use zknight::components::character::{Character, CharacterTrait};
    use zknight::components::tile::{Tile, TileTrait};

    // Local imports

    use super::{Barbarian, FoeTrait};

    // Constants

    const SIZE: u32 = 8;

    #[test]
    #[available_gas(1_000_000)]
    fn test_barbarian_get_hits() {
        let char = CharacterTrait::new(1);
        let barbarian: Barbarian = FoeTrait::new(char.health, char._type);
        let tile = Tile { game_id: 0, level: 0, index: 3 + SIZE * 2, _type: 0, x: 3, y: 2 };
        let target = Tile { game_id: 0, level: 0, index: 3 + SIZE * 1, _type: 0, x: 3, y: 1 };
        let hits = barbarian.get_hits(tile, target, SIZE);
        let expected = 3 + SIZE * 1;
        assert(*hits.at(0) == expected, 'Wrong result');
    }
}
"
"// Internal imports

use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::foe::FoeTrait;

#[derive(Copy, Drop)]
struct Bowman {
    health: u8,
}

impl BowmanImpl of FoeTrait<Bowman> {
    #[inline(always)]
    fn new(health: u8, _type: u8) -> Bowman {","
// Internal imports

use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::foe::FoeTrait;

#[derive(Copy, Drop)]
struct Bowman {
    health: u8,
}

impl BowmanImpl of FoeTrait<Bowman> {
    #[inline(always)]
    fn new(health: u8, _type: u8) -> Bowman {
        Bowman { health: health }
    }
"
"use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::foe::FoeTrait;

#[derive(Copy, Drop)]
struct Bowman {
    health: u8,
}

impl BowmanImpl of FoeTrait<Bowman> {
    #[inline(always)]
    fn can_attack(self: Bowman, tile: Tile, target: Tile) -> bool {","
use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::foe::FoeTrait;

#[derive(Copy, Drop)]
struct Bowman {
    health: u8,
}

impl BowmanImpl of FoeTrait<Bowman> {
    #[inline(always)]
    fn can_attack(self: Bowman, tile: Tile, target: Tile) -> bool {
        let distance = tile.distance(target);
        self.health > 0
            && distance >= 2
            && distance <= 25
            && (tile.x == target.x || tile.y == target.y)
    }
"
use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::foe::FoeTrait;

#[derive(Copy, Drop)]
struct Bowman {
    health: u8,
}

impl BowmanImpl of FoeTrait<Bowman> {
    #[inline(always)]
    fn can_move(self: Bowman) -> bool {"
","
use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::foe::FoeTrait;

#[derive(Copy, Drop)]
struct Bowman {
    health: u8,
}

impl BowmanImpl of FoeTrait<Bowman> {
    #[inline(always)]
    fn can_move(self: Bowman) -> bool  {
        self.health > 0
    }
"
"
use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::foe::FoeTrait;

#[derive(Copy, Drop)]
struct Bowman {
    health: u8,
}

impl BowmanImpl of FoeTrait<Bowman> {
    #[inline(always)]
    fn compute_score(self: Bowman, tile: Tile, target: Tile) -> u32 {
","
use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::foe::FoeTrait;

#[derive(Copy, Drop)]
struct Bowman {
    health: u8,
}

impl BowmanImpl of FoeTrait<Bowman> {
    #[inline(always)]
    fn compute_score(self: Bowman, tile: Tile, target: Tile) -> u32 {
        let distance = tile.distance(target);
        if distance >= 2 && distance <= 25 && (tile.x == target.x || tile.y == target.y) {
            return 0;
        }
        if distance <= 2 || distance > 30 {
            return distance + 1;
        }
        let dx = if tile.x > target.x {
            tile.x - target.x
        } else {
            target.x - tile.x
        };
        let dy = if tile.y > target.y {
            tile.y - target.y
        } else {
            target.y - tile.y
        };
        let min = if dx > dy {
            dy
        } else {
            dx
        };
        min
    }
"
"use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::foe::FoeTrait;

#[derive(Copy, Drop)]
struct Bowman {
    health: u8,
}

impl BowmanImpl of FoeTrait<Bowman> {
     fn get_hits(self: Bowman, tile: Tile, target: Tile, size: u32) -> Span<u32> {","
use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::foe::FoeTrait;

#[derive(Copy, Drop)]
struct Bowman {
    health: u8,
}

impl BowmanImpl of FoeTrait<Bowman> {
 fn get_hits(self: Bowman, tile: Tile, target: Tile, size: u32) -> Span<u32> {
 let mut hits: Array<u32> = array![];
        if !self.can_attack(tile, target) {
            return hits.span();
        };

        if target.x > tile.x {
            let max_x = tile.x + 5;
            let mut i = 2;
            loop {
                let x = tile.x + i;
                if x >= size || x > max_x {
                    break;
                }
                hits.append(x + tile.y * size);
                i += 1;
            };
        } else if target.x < tile.x {
            let min_x = if tile.x > 5 {
                tile.x - 5
            } else {
                0
            };
            let mut i = 2;
            loop {
                if i > tile.x || tile.x < min_x + i {
                    break;
                }
                let x = tile.x - i;
                hits.append(x + tile.y * size);
                i += 1;
            };
        } else if target.y > tile.y {
            let max_y = tile.y + 5;
            let mut i = 2;
            loop {
                let y = tile.y + i;
                if y >= size || y > max_y {
                    break;
                }
                hits.append(tile.x + y * size);
                i += 1;
            };
        } else if target.y < tile.y {
            let min_y = if tile.y > 5 {
                tile.y - 5
            } else {
                0
            };
            let mut i = 2;
            loop {
                if i > tile.y || tile.y < min_y + i {
                    break;
                }
                let y = tile.y - i;
                hits.append(tile.x + y * size);
                i += 1;
            };
        }
        hits.span()
    }
"
"use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::foe::FoeTrait;

#[derive(Copy, Drop)]
struct Bowman {
    health: u8,
}

impl BowmanImpl of FoeTrait<Bowman> {
     fn next(self: Bowman, tile: Tile, target: Tile, size: u32, ref neighbors: Span<Tile>) -> u32 {
    // [Compute] Current tile score","
use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::foe::FoeTrait;

#[derive(Copy, Drop)]
struct Bowman {
    health: u8,
}

impl BowmanImpl of FoeTrait<Bowman> {
    fn next(self: Bowman, tile: Tile, target: Tile, size: u32, ref neighbors: Span<Tile>) -> u32 {
    // [Compute] Current tile score
            let mut result = tile;
        let mut score = self.compute_score(tile, target);

        // [Compute] Lowest score tile
        loop {
            match neighbors.pop_front() {
                Option::Some(neighbor) => {
                    let new_tile = *neighbor;
                    let new_score = self.compute_score(new_tile, target);
                    if new_score < score {
                        score = new_score;
                        result = new_tile;
                    };
                },
                Option::None => {
                    break;
                },
            };
        };

        result.index
    }
"
"
use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::foe::FoeTrait;

#[derive(Copy, Drop)]
struct Bowman {
    health: u8,
}

impl BowmanImpl of FoeTrait<Bowman> {
    #[inline(always)]
    fn new(health: u8, _type: u8) -> Bowman {
        Bowman { health: health }
    }

    #[inline(always)]
    fn can_attack(self: Bowman, tile: Tile, target: Tile) -> bool {
        let distance = tile.distance(target);
        self.health > 0
            && distance >= 2
            && distance <= 25
            && (tile.x == target.x || tile.y == target.y)
    }

    #[inline(always)]
    fn can_move(self: Bowman) -> bool {
        self.health > 0
    }

    #[inline(always)]
    fn compute_score(self: Bowman, tile: Tile, target: Tile) -> u32 {
        let distance = tile.distance(target);
        if distance >= 2 && distance <= 25 && (tile.x == target.x || tile.y == target.y) {
            return 0;
        }
        if distance <= 2 || distance > 30 {
            return distance + 1;
        }
        let dx = if tile.x > target.x {
            tile.x - target.x
        } else {
            target.x - tile.x
        };
        let dy = if tile.y > target.y {
            tile.y - target.y
        } else {
            target.y - tile.y
        };
        let min = if dx > dy {
            dy
        } else {
            dx
        };
        min
    }

    fn get_hits(self: Bowman, tile: Tile, target: Tile, size: u32) -> Span<u32> {
        let mut hits: Array<u32> = array![];
        if !self.can_attack(tile, target) {
            return hits.span();
        };

        if target.x > tile.x {
            let max_x = tile.x + 5;
            let mut i = 2;
            loop {
                let x = tile.x + i;
                if x >= size || x > max_x {
                    break;
                }
                hits.append(x + tile.y * size);
                i += 1;
            };
        } else if target.x < tile.x {
            let min_x = if tile.x > 5 {
                tile.x - 5
            } else {
                0
            };
            let mut i = 2;
            loop {
                if i > tile.x || tile.x < min_x + i {
                    break;
                }
                let x = tile.x - i;
                hits.append(x + tile.y * size);
                i += 1;
            };
        } else if target.y > tile.y {
            let max_y = tile.y + 5;
            let mut i = 2;
            loop {
                let y = tile.y + i;
                if y >= size || y > max_y {
                    break;
                }
                hits.append(tile.x + y * size);
                i += 1;
            };
        } else if target.y < tile.y {
            let min_y = if tile.y > 5 {
                tile.y - 5
            } else {
                0
            };
            let mut i = 2;
            loop {
                if i > tile.y || tile.y < min_y + i {
                    break;
                }
                let y = tile.y - i;
                hits.append(tile.x + y * size);
                i += 1;
            };
        }
        hits.span()
    }

    fn next(self: Bowman, tile: Tile, target: Tile, size: u32, ref neighbors: Span<Tile>) -> u32 {
        // [Compute] Current tile score
        let mut result = tile;
        let mut score = self.compute_score(tile, target);

        // [Compute] Lowest score tile
        loop {
            match neighbors.pop_front() {
                Option::Some(neighbor) => {
                    let new_tile = *neighbor;
                    let new_score = self.compute_score(new_tile, target);
                    if new_score < score {
                        score = new_score;
                        result = new_tile;
                    };
                },
                Option::None => {
                    break;
                },
            };
        };

        result.index
    }
}","
use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::foe::FoeTrait;

#[derive(Copy, Drop)]
struct Bowman {
    health: u8,
}

impl BowmanImpl of FoeTrait<Bowman> {
    #[inline(always)]
    fn new(health: u8, _type: u8) -> Bowman {
        Bowman { health: health }
    }

    #[inline(always)]
    fn can_attack(self: Bowman, tile: Tile, target: Tile) -> bool {
        let distance = tile.distance(target);
        self.health > 0
            && distance >= 2
            && distance <= 25
            && (tile.x == target.x || tile.y == target.y)
    }

    #[inline(always)]
    fn can_move(self: Bowman) -> bool {
        self.health > 0
    }

    #[inline(always)]
    fn compute_score(self: Bowman, tile: Tile, target: Tile) -> u32 {
        let distance = tile.distance(target);
        if distance >= 2 && distance <= 25 && (tile.x == target.x || tile.y == target.y) {
            return 0;
        }
        if distance <= 2 || distance > 30 {
            return distance + 1;
        }
        let dx = if tile.x > target.x {
            tile.x - target.x
        } else {
            target.x - tile.x
        };
        let dy = if tile.y > target.y {
            tile.y - target.y
        } else {
            target.y - tile.y
        };
        let min = if dx > dy {
            dy
        } else {
            dx
        };
        min
    }

    fn get_hits(self: Bowman, tile: Tile, target: Tile, size: u32) -> Span<u32> {
        let mut hits: Array<u32> = array![];
        if !self.can_attack(tile, target) {
            return hits.span();
        };

        if target.x > tile.x {
            let max_x = tile.x + 5;
            let mut i = 2;
            loop {
                let x = tile.x + i;
                if x >= size || x > max_x {
                    break;
                }
                hits.append(x + tile.y * size);
                i += 1;
            };
        } else if target.x < tile.x {
            let min_x = if tile.x > 5 {
                tile.x - 5
            } else {
                0
            };
            let mut i = 2;
            loop {
                if i > tile.x || tile.x < min_x + i {
                    break;
                }
                let x = tile.x - i;
                hits.append(x + tile.y * size);
                i += 1;
            };
        } else if target.y > tile.y {
            let max_y = tile.y + 5;
            let mut i = 2;
            loop {
                let y = tile.y + i;
                if y >= size || y > max_y {
                    break;
                }
                hits.append(tile.x + y * size);
                i += 1;
            };
        } else if target.y < tile.y {
            let min_y = if tile.y > 5 {
                tile.y - 5
            } else {
                0
            };
            let mut i = 2;
            loop {
                if i > tile.y || tile.y < min_y + i {
                    break;
                }
                let y = tile.y - i;
                hits.append(tile.x + y * size);
                i += 1;
            };
        }
        hits.span()
    }

    fn next(self: Bowman, tile: Tile, target: Tile, size: u32, ref neighbors: Span<Tile>) -> u32 {
        // [Compute] Current tile score
        let mut result = tile;
        let mut score = self.compute_score(tile, target);

        // [Compute] Lowest score tile
        loop {
            match neighbors.pop_front() {
                Option::Some(neighbor) => {
                    let new_tile = *neighbor;
                    let new_score = self.compute_score(new_tile, target);
                    if new_score < score {
                        score = new_score;
                        result = new_tile;
                    };
                },
                Option::None => {
                    break;
                },
            };
        };

        result.index
    }
}


#[cfg(test)]
mod tests {
    use traits::Into;
    use array::{ArrayTrait, SpanTrait};
    use dict::Felt252DictTrait;
    use nullable::NullableTrait;
    use zknight::components::character::{Character, CharacterTrait};
    use zknight::components::tile::{Tile, TileTrait};
    use super::{Bowman, FoeTrait};
    use debug::PrintTrait;

    const SIZE: u32 = 8;

    #[test]
    #[available_gas(1_000_000)]
    fn test_bowman_get_hits_top_break() {
        let char = CharacterTrait::new(1);
        let bowman: Bowman = FoeTrait::new(char.health, char._type);
        let tile = Tile { game_id: 0, level: 0, index: 3 + SIZE * 2, _type: 0, x: 3, y: 2 };
        let target = Tile { game_id: 0, level: 0, index: 1 + SIZE * 2, _type: 0, x: 1, y: 2 };
        let hits = bowman.get_hits(tile, target, SIZE);
        let expected = array![1 + SIZE * 2, 0 + SIZE * 2].span();
        assert(hits.len() == expected.len(), 'Wrong result len');
        assert(hits.at(0) == expected.at(0), 'Wrong result at 0');
        assert(hits.at(1) == expected.at(1), 'Wrong result at 1');
    }

    #[test]
    #[available_gas(1_000_000)]
    fn test_bowman_get_hits_top() {
        let char = CharacterTrait::new(1);
        let bowman: Bowman = FoeTrait::new(char.health, char._type);
        let tile = Tile { game_id: 0, level: 0, index: 7 + SIZE * 2, _type: 0, x: 7, y: 2 };
        let target = Tile { game_id: 0, level: 0, index: 4 + SIZE * 2, _type: 0, x: 4, y: 2 };
        let hits = bowman.get_hits(tile, target, SIZE);
        let expected = array![5 + SIZE * 2, 4 + SIZE * 2, 3 + SIZE * 2, 2 + SIZE * 2].span();
        assert(hits.len() == expected.len(), 'Wrong result len');
        assert(hits.at(0) == expected.at(0), 'Wrong result at 0');
        assert(hits.at(1) == expected.at(1), 'Wrong result at 1');
        assert(hits.at(2) == expected.at(2), 'Wrong result at 2');
        assert(hits.at(3) == expected.at(3), 'Wrong result at 3');
    }

    #[test]
    #[available_gas(1_000_000)]
    fn test_bowman_get_hits_bottom() {
        let char = CharacterTrait::new(1);
        let bowman: Bowman = FoeTrait::new(char.health, char._type);
        let tile = Tile { game_id: 0, level: 0, index: 1 + SIZE * 2, _type: 0, x: 1, y: 2 };
        let target = Tile { game_id: 0, level: 0, index: 3 + SIZE * 2, _type: 0, x: 3, y: 2 };
        let hits = bowman.get_hits(tile, target, SIZE);
        let expected = array![3 + SIZE * 2, 4 + SIZE * 2, 5 + SIZE * 2, 6 + SIZE * 2].span();
        assert(hits.len() == expected.len(), 'Wrong result len');
        assert(hits.at(0) == expected.at(0), 'Wrong result at 0');
        assert(hits.at(1) == expected.at(1), 'Wrong result at 1');
        assert(hits.at(2) == expected.at(2), 'Wrong result at 2');
        assert(hits.at(3) == expected.at(3), 'Wrong result at 3');
    }

    #[test]
    #[available_gas(1_000_000)]
    fn test_bowman_get_hits_bottom_break() {
        let char = CharacterTrait::new(1);
        let bowman: Bowman = FoeTrait::new(char.health, char._type);
        let tile = Tile { game_id: 0, level: 0, index: 4 + SIZE * 2, _type: 0, x: 4, y: 2 };
        let target = Tile { game_id: 0, level: 0, index: 7 + SIZE * 2, _type: 0, x: 7, y: 2 };
        let hits = bowman.get_hits(tile, target, SIZE);
        let expected = array![6 + SIZE * 2, 7 + SIZE * 2].span();
        assert(hits.len() == expected.len(), 'Wrong result len');
        assert(hits.at(0) == expected.at(0), 'Wrong result at 0');
        assert(hits.at(1) == expected.at(1), 'Wrong result at 1');
    }

    #[test]
    #[available_gas(1_000_000)]
    fn test_bowman_get_hits_left() {
        let char = CharacterTrait::new(1);
        let bowman: Bowman = FoeTrait::new(char.health, char._type);
        let tile = Tile { game_id: 0, level: 0, index: 1 + SIZE * 1, _type: 0, x: 1, y: 1 };
        let target = Tile { game_id: 0, level: 0, index: 1 + SIZE * 3, _type: 0, x: 1, y: 3 };
        let hits = bowman.get_hits(tile, target, SIZE);
        let expected = array![1 + SIZE * 3, 1 + SIZE * 4, 1 + SIZE * 5, 1 + SIZE * 6].span();
        assert(hits.len() == expected.len(), 'Wrong result len');
        assert(hits.at(0) == expected.at(0), 'Wrong result at 0');
        assert(hits.at(1) == expected.at(1), 'Wrong result at 1');
        assert(hits.at(2) == expected.at(2), 'Wrong result at 2');
        assert(hits.at(3) == expected.at(3), 'Wrong result at 3');
    }

    #[test]
    #[available_gas(1_000_000)]
    fn test_bowman_get_hits_left_break() {
        let char = CharacterTrait::new(1);
        let bowman: Bowman = FoeTrait::new(char.health, char._type);
        let tile = Tile { game_id: 0, level: 0, index: 1 + SIZE * 5, _type: 0, x: 1, y: 5 };
        let target = Tile { game_id: 0, level: 0, index: 1 + SIZE * 7, _type: 0, x: 1, y: 7 };
        let hits = bowman.get_hits(tile, target, SIZE);
        let expected = array![1 + SIZE * 7].span();
        assert(hits.len() == expected.len(), 'Wrong result len');
        assert(hits.at(0) == expected.at(0), 'Wrong result at 0');
    }

    #[test]
    #[available_gas(1_000_000)]
    fn test_bowman_get_hits_right_break() {
        let char = CharacterTrait::new(1);
        let bowman: Bowman = FoeTrait::new(char.health, char._type);
        let tile = Tile { game_id: 0, level: 0, index: 1 + SIZE * 3, _type: 0, x: 1, y: 3 };
        let target = Tile { game_id: 0, level: 0, index: 1 + SIZE * 1, _type: 0, x: 1, y: 1 };
        let hits = bowman.get_hits(tile, target, SIZE);
        let expected = array![1 + SIZE * 1, 1 + SIZE * 0].span();
        assert(hits.len() == expected.len(), 'Wrong result len');
        assert(hits.at(0) == expected.at(0), 'Wrong result at 0');
        assert(hits.at(1) == expected.at(1), 'Wrong result at 1');
    }

    #[test]
    #[available_gas(1_000_000)]
    fn test_bowman_get_hits_right() {
        let char = CharacterTrait::new(1);
        let bowman: Bowman = FoeTrait::new(char.health, char._type);
        let tile = Tile { game_id: 0, level: 0, index: 1 + SIZE * 7, _type: 0, x: 1, y: 7 };
        let target = Tile { game_id: 0, level: 0, index: 1 + SIZE * 5, _type: 0, x: 1, y: 5 };
        let hits = bowman.get_hits(tile, target, SIZE);
        let expected = array![1 + SIZE * 5, 1 + SIZE * 4, 1 + SIZE * 3, 1 + SIZE * 2].span();
        assert(hits.len() == expected.len(), 'Wrong result len');
        assert(hits.at(0) == expected.at(0), 'Wrong result at 0');
        assert(hits.at(1) == expected.at(1), 'Wrong result at 1');
        assert(hits.at(2) == expected.at(2), 'Wrong result at 2');
        assert(hits.at(3) == expected.at(3), 'Wrong result at 3');
    }
}
"
use zknight::constants::{BARBARIAN_TYPE, BOWMAN_TYPE, WIZARD_TYPE};
use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::barbarian::Barbarian;
use zknight::entities::bowman::Bowman;
use zknight::entities::wizard::Wizard;

#[derive(Copy, Drop)]
struct Foe {
    health: u8,
    _type: u8,
}

trait FoeTrait<T> {
    fn new(health: u8, _type: u8) -> T;
    fn can_attack(self: T, tile: Tile, target: Tile) -> bool;
    fn can_move(self: T) -> bool;
    fn compute_score(self: T, tile: Tile, target: Tile) -> u32;
    fn get_hits(self: T, tile: Tile, target: Tile, size: u32) -> Span<u32>;
    fn next(self: T, tile: Tile, target: Tile, size: u32, ref neighbors: Span<Tile>) -> u32;
}
"
","
use zknight::constants::{BARBARIAN_TYPE, BOWMAN_TYPE, WIZARD_TYPE};
use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::barbarian::Barbarian;
use zknight::entities::bowman::Bowman;
use zknight::entities::wizard::Wizard;

#[derive(Copy, Drop)]
struct Foe {
    health: u8,
    _type: u8,
}

trait FoeTrait<T> {
    fn new(health: u8, _type: u8) -> T;
    fn can_attack(self: T, tile: Tile, target: Tile) -> bool;
    fn can_move(self: T) -> bool;
    fn compute_score(self: T, tile: Tile, target: Tile) -> u32;
    fn get_hits(self: T, tile: Tile, target: Tile, size: u32) -> Span<u32>;
    fn next(self: T, tile: Tile, target: Tile, size: u32, ref neighbors: Span<Tile>) -> u32;
}

impl FoeImpl of FoeTrait<Foe> {
    fn new(health: u8, _type: u8) -> Foe {
        Foe { health: health, _type: _type }
    }

    fn can_attack(self: Foe, tile: Tile, target: Tile) -> bool {
        if self._type == BARBARIAN_TYPE {
            let barbarian = Barbarian { health: self.health };
            return barbarian.can_attack(tile, target);
        }
        if self._type == BOWMAN_TYPE {
            let bowman = Bowman { health: self.health };
            return bowman.can_attack(tile, target);
        }
        let wizard = Wizard { health: self.health };
        wizard.can_attack(tile, target)
    }

    fn can_move(self: Foe) -> bool {
        if self._type == BARBARIAN_TYPE {
            let barbarian = Barbarian { health: self.health };
            return barbarian.can_move();
        }
        if self._type == BOWMAN_TYPE {
            let bowman = Bowman { health: self.health };
            return bowman.can_move();
        }
        let wizard = Wizard { health: self.health };
        wizard.can_move()
    }

    fn compute_score(self: Foe, tile: Tile, target: Tile) -> u32 {
        if self._type == BARBARIAN_TYPE {
            let barbarian = Barbarian { health: self.health };
            return barbarian.compute_score(tile, target);
        }
        if self._type == BOWMAN_TYPE {
            let bowman = Bowman { health: self.health };
            return bowman.compute_score(tile, target);
        }
        let wizard = Wizard { health: self.health };
        wizard.compute_score(tile, target)
    }

    fn get_hits(self: Foe, tile: Tile, target: Tile, size: u32) -> Span<u32> {
        if self._type == BARBARIAN_TYPE {
            let barbarian = Barbarian { health: self.health };
            return barbarian.get_hits(tile, target, size);
        }
        if self._type == BOWMAN_TYPE {
            let bowman = Bowman { health: self.health };
            return bowman.get_hits(tile, target, size);
        }
        let wizard = Wizard { health: self.health };
        wizard.get_hits(tile, target, size)
    }

    fn next(self: Foe, tile: Tile, target: Tile, size: u32, ref neighbors: Span<Tile>) -> u32 {
        if self._type == BARBARIAN_TYPE {
            let barbarian = Barbarian { health: self.health };
            return barbarian.next(tile, target, size, ref neighbors);
        }
        if self._type == BOWMAN_TYPE {
            let bowman = Bowman { health: self.health };
            return bowman.next(tile, target, size, ref neighbors);
        }
        let wizard = Wizard { health: self.health };
        wizard.next(tile, target, size, ref neighbors)
    }
}"
"
use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::foe::FoeTrait;

#[derive(Copy, Drop)]
struct Wizard {
    health: u8,
}

impl WizardImpl of FoeTrait<Wizard> {
    #[inline(always)]
    fn new(health: u8, _type: u8) -> Wizard {
        Wizard { health: health }
    }

    #[inline(always)]
    fn can_attack(self: Wizard, tile: Tile, target: Tile) -> bool {","
use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::foe::FoeTrait;

#[derive(Copy, Drop)]
struct Wizard {
    health: u8,
}

impl WizardImpl of FoeTrait<Wizard> {
    #[inline(always)]
    fn new(health: u8, _type: u8) -> Wizard {
        Wizard { health: health }
    }

    #[inline(always)]
    fn can_attack(self: Wizard, tile: Tile, target: Tile) -> bool {
            let distance = tile.distance(target);
        self.health > 0 && distance <= 25 && (tile.x == target.x || tile.y == target.y)
    }
"
"use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::foe::FoeTrait;

#[derive(Copy, Drop)]
struct Wizard {
    health: u8,
}

impl WizardImpl of FoeTrait<Wizard> {
#[inline(always)]
    fn can_attack(self: Wizard, tile: Tile, target: Tile) -> bool {","
use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::foe::FoeTrait;

#[derive(Copy, Drop)]
struct Wizard {
    health: u8,
}

impl WizardImpl of FoeTrait<Wizard> {#[inline(always)]
    fn can_attack(self: Wizard, tile: Tile, target: Tile) -> bool {
            let distance = tile.distance(target);
        self.health > 0 && distance <= 25 && (tile.x == target.x || tile.y == target.y)
    }
"
"// Internal imports

use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::foe::FoeTrait;

#[derive(Copy, Drop)]
struct Wizard {
    health: u8,
}

impl WizardImpl of FoeTrait<Wizard> {    
    #[inline(always)]
    fn can_move","// Internal imports

use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::foe::FoeTrait;

#[derive(Copy, Drop)]
struct Wizard {
    health: u8,
}

impl WizardImpl of FoeTrait<Wizard> {
    #[inline(always)]
    fn can_move(self: Wizard) -> bool {
        self.health > 0
    }
"
"use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::foe::FoeTrait;

#[derive(Copy, Drop)]
struct Wizard {
    health: u8,
}

impl WizardImpl of FoeTrait<Wizard> {    
    #[inline(always)]
    fn compute_score(self: Wizard, tile: Tile, target: Tile) -> u32 {","
use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::foe::FoeTrait;

#[derive(Copy, Drop)]
struct Wizard {
    health: u8,
}

impl WizardImpl of FoeTrait<Wizard> {
        #[inline(always)]
    fn compute_score(self: Wizard, tile: Tile, target: Tile) -> u32 {
            let distance = tile.distance(target);
        if distance <= 25 && (tile.x == target.x || tile.y == target.y) {
            return 0;
        }
        if distance > 30 {
            return distance + 1;
        }
        let dx = if tile.x > target.x {
            tile.x - target.x
        } else {
            target.x - tile.x
        };
        let dy = if tile.y > target.y {
            tile.y - target.y
        } else {
            target.y - tile.y
        };
        let min = if dx > dy {
            dy
        } else {
            dx
        };
        min
    }
"
"use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::foe::FoeTrait;

#[derive(Copy, Drop)]
struct Wizard {
    health: u8,
}

impl WizardImpl of FoeTrait<Wizard> {    
    #[inline(always)]
    fn get_hits(self: Wizard, tile: Tile, target: Tile, size: u32) -> Span<u32> {","
use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::foe::FoeTrait;

#[derive(Copy, Drop)]
struct Wizard {
    health: u8,
}

impl WizardImpl of FoeTrait<Wizard> {
        #[inline(always)]
        fn get_hits(self: Wizard, tile: Tile, target: Tile, size: u32) -> Span<u32> {
        let mut hits: Array<u32> = array![];
        if !self.can_attack(tile, target) {
            return hits.span();
        };

        if target.x > tile.x {
            let max_x = tile.x + 5;
            let mut i = 1;
            loop {
                let x = tile.x + i;
                if x >= size || x > max_x {
                    break;
                }
                hits.append(x + tile.y * size);
                i += 1;
            };
        } else if target.x < tile.x {
            let min_x = if tile.x > 5 {
                tile.x - 5
            } else {
                0
            };
            let mut i = 1;
            loop {
                if i > tile.x || tile.x < min_x + i {
                    break;
                }
                let x = tile.x - i;
                hits.append(x + tile.y * size);
                i += 1;
            };
        } else if target.y > tile.y {
            let max_y = tile.y + 5;
            let mut i = 1;
            loop {
                let y = tile.y + i;
                if y >= size || y > max_y {
                    break;
                }
                hits.append(tile.x + y * size);
                i += 1;
            };
        } else if target.y < tile.y {
            let min_y = if tile.y > 5 {
                tile.y - 5
            } else {
                0
            };
            let mut i = 1;
            loop {
                if i > tile.y || tile.y < min_y + i {
                    break;
                }
                let y = tile.y - i;
                hits.append(tile.x + y * size);
                i += 1;
            };
        }
        hits.span()
    }
"
"use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::foe::FoeTrait;

#[derive(Copy, Drop)]
struct Wizard {
    health: u8,
}

impl WizardImpl of FoeTrait<Wizard> {    
    #[inline(always)]
    fn next(self: Wizard, tile: Tile, target: Tile, size: u32, ref neighbors: Span<Tile>) -> u32 {
","
use zknight::components::tile::{Tile, TileTrait};
use zknight::entities::foe::FoeTrait;

#[derive(Copy, Drop)]
struct Wizard {
    health: u8,
}

impl WizardImpl of FoeTrait<Wizard> {
    #[inline(always)]
    fn next(self: Wizard, tile: Tile, target: Tile, size: u32, ref neighbors: Span<Tile>) -> u32 {
        // [Compute] Current tile score
        let mut result = tile;
        let mut score = self.compute_score(tile, target);

        // [Compute] Lowest score tile
        loop {
            match neighbors.pop_front() {
                Option::Some(neighbor) => {
                    let new_tile = *neighbor;
                    let new_score = self.compute_score(new_tile, target);
                    if new_score < score {
                        score = new_score;
                        result = new_tile;
                    };
                },
                Option::None => {
                    break;
                },
            };
        };

        result.index
    }
}
"