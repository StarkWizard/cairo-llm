question,answer
How to check whether the development tools related to starknet are installed successfully?,"First, confirm that the following commands work on your system. If they don't, refer to Basic Installation in this chapter.
1.scarb --version  # For Cairo code compilation
2.starkli --version  # To interact with Starknet
3.katana --version # To declare and deploy on local development"
How to check the compiler versions Starkli supports?,Run: 'starkli declare --help'. You'll see a list of possible compiler versions under the --compiler-version flag.
How to install a specific version of scarb?,"To install a specific version, such as 2.3.0, Run: 'curl --proto '=https' --tlsv1.2 -sSf https://docs.swmansion.com/scarb/install.sh | sh -s -- -v 2.3.0'"
How to make a new contract on scarb?,"Run: 'scarb new my_contract'. Its structure appears as: '    src/
      lib.cairo
    .gitignore
    Scarb.toml'"
How to configure Environment Variables?,"Amend the Scarb.toml file to integrate the starknet dependency and introduce the starknet-contract target:'
    [dependencies]
    starknet = "">=2.3.0""
    [[target.starknet-contract]]'
, then In the src/ directory, create a .env file with the following:'
export STARKNET_ACCOUNT=katana-0
export STARKNET_RPC=http://0.0.0.0:5050'
These settings streamline Starkli command operations."
How to declaring Smart Contracts in Starknet?,"Deploying a Starknet smart contract requires two primary steps:
Declare the contract's code.
Deploy an instance of that declared code.
Begin with the src/lib.cairo file, which provides a foundational template. Remove its contents and insert the following:
#[starknet::contract]
mod hello {
    #[storage]
    struct Storage {
        name: felt252,
    }

    #[constructor]
    fn constructor(ref self: ContractState, name: felt252) {
        self.name.write(name);
    }

    #[external(v0)]
        fn get_name(self: @ContractState) -> felt252 {
            self.name.read()
        }
    #[external(v0)]
        fn set_name(ref self: ContractState, name: felt252) {
            let previous = self.name.read();
            self.name.write(name);
        }
}
This rudimentary smart contract serves as a starting point.
Compile the contract with the Scarb compiler. If Scarb isn't installed, consult the Installation section.
'scarb build'
The above command results in a compiled contract under target/dev/, named ""my_contract_hello.contract_class.json"" (check Scarb's subchapter for more details).
Having compiled the smart contract, it's time to declare it with Starkli and katana. First, ensure your project acknowledges the environmental variables:
'source .env'
Next, launch Katana. In a separate terminal, run (more details in the Katan subchapter):
'katana'
To declare your contract, execute:
'starkli declare target/dev/my_contract_hello.contract_class.json'
Facing an ""Error: Invalid contract class""? It indicates a version mismatch between Scarb's compiler and Starkli. Refer to the earlier steps to sync the versions. Typically, Starkli supports compiler versions approved by mainnet, even if the most recent Scarb version isn't compatible.
Upon successful command execution, you'll obtain a contract class hash: This unique hash serves as the identifier for your contract class within Starknet. For example:
'Class hash declared: 0x00bfb49ff80fd7ef5e84662d6d256d49daf75e0c5bd279b20a786f058ca21418
Consider this hash as the contract class's address.'
If you try to declare an already existing contract class, don't fret. Just proceed. You might see:
'Not declaring class as its already declared. Class hash:
0x00bfb49ff80fd7ef5e84662d6d256d49daf75e0c5bd279b20a786f058ca21418'."
How to deploy Starknet Smart Contracts?,"To deploy a smart contract on the katana local devnet, use the following command. It primarily requires:
1.Your contract class hash.
2.Constructor arguments your contract needs (in our example, a name of type felt252).
Here's the command structure:'
    starkli deploy \
        <CLASS_HASH> \
        <CONSTRUCTOR_INPUTS>'
Notice the constructor inputs are in felt format. So we need to convert a short string to a felt252 format. We can use the to-cairo-string command for this:'
    starkli to-cairo-string <STRING>'
In this case, we'll use the string ""starknetbook"" as the name:'
    starkli to-cairo-string starknetbook'
The output:'
    0x737461726b6e6574626f6f6b'
Now deploy using a class hash and constructor input:'
    starkli deploy \     
0x00bfb49ff80fd7ef5e84662d6d256d49daf75e0c5bd279b20a786f058ca21418 \
        0x737461726b6e6574626f6f6b'
After running, expect an output similar to:'
    Deploying class 0x00bfb49ff80fd7ef5e84662d6d256d49daf75e0c5bd279b20a786f058ca21418 with salt 0x054645c0d1e766ddd927b3bde150c0a3dc0081af7fb82160c1582e05f6018794...
    The contract will be deployed at address 0x07cdd583619462c2b14532eddb2b169b8f8d94b63bfb5271dae6090f95147a44
    Contract deployment transaction: 0x00413d9638fecb75eb07593b5c76d13a68e4af7962c368c5c2e810e7a310d54c
    Contract deployed: 0x07cdd583619462c2b14532eddb2b169b8f8d94b63bfb5271dae6090f95147a44'"
How to interact with my contract?,"Using Starkli, you can interact with smart contracts through two primary methods:
1.call: For read-only functions.
2.invoke: For functions that alter the state.
Reading Data with call
The call command let's you query contract functions without transacting. For instance, if you want to determine the current contract owner using the get_name function, which requires no arguments:'
    starkli call \
        <CONTRACT_ADDRESS> \
        get_name'
Replace' <CONTRACT_ADDRESS> 'with the address of your contract. The command will return the owner's address, which was initially set during the contract's deployment:'
    [      ""0x0000000000000000000000000000000000000000737461726b6e6574626f6f6b""
    ]'
In Starknet, we use the felt252 data type to represent strings. This can be decoded into its string representation:'
starkli parse-cairo-string 0x737461726b6e6574626f6f6b'
The result:'
starknetbook'"
How to modify Contract State?,"To alter the contract state, use the invoke command. For instance, if you want to update the name field in the storage, utilize the set_name function:

    starkli invoke \
        <CONTRACT_ADDRESS> \
        set_name \
        <felt252>
Where:

<CONTRACT_ADDRESS> is the address of your contract.
<felt252> is the new value for the name field, in felt252 format.
For example, to update the name to ""Omar"", first convert the string ""Omar"" to its felt252 representation:

    starkli to-cairo-string Omar
This will return:

    0x4f6d6172
Now, proceed with the invoke command:


    starkli invoke 0x07cdd583619462c2b14532eddb2b169b8f8d94b63bfb5271dae6090f95147a44 set_name 0x4f6d6172
Now, you have adeptly modified and interfaced with your Starknet contract."
