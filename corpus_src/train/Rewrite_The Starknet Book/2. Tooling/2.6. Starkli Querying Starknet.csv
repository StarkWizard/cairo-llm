question,answer
What is Starkli?,"Starkli is a Command Line Interface (CLI) tool designed for Starknet interaction, utilizing the capabilities of starknet-rs. This tool simplifies querying and executing transactions on Starknet."
How can I set up with Starkli?,"To ensure a smooth start with Starkli, execute the following command on your system. If you encounter any issues, refer to the Basic Installation guide for assistance:

starkli --version  # Verifies Starkli installation and interacts with Starknet"
How to connect to starknet with Starkli?,"Starkli primarily operates with a JSON-RPC provider. To access a JSON-RPC endpoint, you have several options:

1.Use services like Infura or Alchemy for an RPC client.
2.Employ a temporary local node like 'katana' for development and testing purposes.
3.Setup your own node."
How to use Starkli to interact with katana?,"To start Katana, open a terminal and execute:

katana

To retrieve the chain id from the Katana JSON-RPC endpoint, use the following command:

starkli chain-id --rpc http://0.0.0.0:5050

This command will output:

0x4b4154414e41 (KATANA)

To obtain the latest block number on Katana, run:

    starkli block-number --rpc http://0.0.0.0:5050

The output will be:

    0

Since katana is a temporary local node and its state is ephemeral, the block number is initially 0. Refer to Introduction to Starkli, Scarb and Katana for further details on changing the state of Katana and observing the block number after commands like starkli declare and starkli deploy.

To declare a contract, execute:

starkli declare target/dev/my_contract_hello.contract_class.json

After declaring, the output will be:

Class hash declared: 0x00bfb49ff80fd7ef5e84662d6d256d49daf75e0c5bd279b20a786f058ca21418

Retrieving the latest block number on Katana again:

starkli block-number

Will result in:

1

Katana logs also reflect these changes:

2023-11-03T04:38:48.712332Z DEBUG server: method='starknet_chainId'
2023-11-03T04:38:48.725133Z DEBUG server: method='starknet_getClass'
2023-11-03T04:38:48.726668Z DEBUG server: method='starknet_chainId'
2023-11-03T04:38:48.741588Z DEBUG server: method='starknet_getNonce'
2023-11-03T04:38:48.744718Z DEBUG server: method='starknet_estimateFee'
2023-11-03T04:38:48.766843Z DEBUG server: method='starknet_getNonce'
2023-11-03T04:38:48.770236Z DEBUG server: method='starknet_addDeclareTransaction'
2023-11-03T04:38:48.779714Z  INFO txpool: Transaction received | Hash: 0x352f04ad496761c73806f92c64c267746afcbc16406bd0041ac6efa70b01a51
2023-11-03T04:38:48.782100Z TRACE executor: Transaction resource usage: Steps: 2854 | ECDSA: 1 | L1 Gas: 3672 | Pedersen: 15 | Range Checks: 63
2023-11-03T04:38:48.782112Z TRACE executor: Event emitted keys=[0x99cd8bde557814842a3121e8ddfd433a539b8c9f14bf31ebf108d12e6196e9]
2023-11-03T04:38:48.782399Z  INFO backend: ?? Block 1 mined with 1 transactions

These logs indicate the receipt of a transaction, gas usage, and the mining of a new block, explaining the increment in block number to 1.

Before deploying a contract, note that Starkli supports argument resolution, simplifying the input process. For instance, constructor inputs in felt format can be easily passed as 'str:<String-value>':


    starkli deploy \
        0x00bfb49ff80fd7ef5e84662d6d256d49daf75e0c5bd279b20a786f058ca21418 \
        str:starknet-book

This command deploys the contract without requiring to-cairo-string, and a new block is mined as a result."
How to use Starkli to interact with starknet testnet?,"To interact with the Testnet, use a third-party JSON-RPC API provider like Infura or Alchemy. With your provider URL, execute the following command to get the latest block number:

starkli block-number --rpc https://starknet-goerli.g.alchemy.com/v2/V0WI...

This command will return a response like:

896360

You can confirm this result by checking Starkscan, where you'll find matching data.

Starkli also streamlines the process of invoking commands. For instance, to transfer 1000 Wei of ETH to address 0x1234, first set up your environment variables:

export STARKNET_ACCOUNT=~/.starkli-wallets/deployer/my_account_1.json
export STARKNET_KEYSTORE=~/.starkli-wallets/deployer/my_keystore_1.json

Then, use the following command for the transfer:

starkli invoke eth transfer <YOUR-ACCOUNT-ADDRESS> u256:1000

You can create your own script to connect to Starknet using Starkli. In the next subchapter we will create a short Bash script."
Give me an example script of connecting to starknet with Katana.,"Katana Local Node

Description: This script connects to the local StarkNet devnet through Katana, retrieves the current chain ID, the latest block number, and the balance of a specified account.

First, ensure that Katana is running (in terminal 1):

katana

Then, create a file named script_devnet (in terminal 2):

touch script_devnet

Edit this file with your preferred text editor and insert the following script:

#!/bin/bash
chain=$(starkli chain-id --rpc http://0.0.0.0:5050)
echo 'Connected to the Starknet local devnet with chain id: $chain'

block=$(starkli block-number --rpc http://0.0.0.0:5050)
echo 'The latest block number on Katana is: $block'

account1='0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973'
balance=$(starkli balance $account1 --rpc http://0.0.0.0:5050)
echo 'The balance of account $account1 is: $balance ETH'

Execute the script with:

bash script_devnet

You will see output details from the devnet."
Give me an example script of connecting to Goerli testnet.,"Goerli Testnet

Description: This script connects to the Goerli testnet, reads the latest block number, and retrieves the transaction receipt for a specific transaction hash.

For Goerli testnet interactions, create a file named 'script_testnet':

touch script_testnet

Edit the file and paste in this script:

echo 'Input your testnet API URL: '
read url
chain=$(starkli chain-id --rpc $url)
echo 'Connected to the Starknet testnet with chain id: $chain'

block=$(starkli block-number --rpc $url)
echo 'The latest block number on Goerli is: $block'

echo 'Input your transaction hash: '
read hash
receipt=$(starkli receipt $hash --rpc $url)
echo 'The receipt of transaction $hash is: $receipt'

Run the script:

bash script_testnet

You will need to input a 'testnet API URL' and a 'transaction hash'. Example hash: 0x2dd73eb1802aef84e8d73334ce0e5856b18df6626fe1a67bb247fcaaccaac8c.

These are brief examples but you get the idea. You can create custom Bash scripts to customize your interactions with Starknet."
