question,answer
"use starknet::ContractAddress;

#[derive(Serde, Drop, Copy, PartialEq, Introspect)]
enum Color {
    White,
    Black,
    None,
}

#[derive(Model, Drop, Serde)]
struct Player {
    #[key]
    game_id: u32,
    #[key]
    address: ContractAddress,
    color: Color
}

trait PlayerTrait {
    fn is_not_my_piece(self: @Player, piece_color: Color) -> bool;
}
","
use starknet::ContractAddress;

#[derive(Serde, Drop, Copy, PartialEq, Introspect)]
enum Color {
    White,
    Black,
    None,
}


#[derive(Model, Drop, Serde)]
struct Player {
    #[key]
    game_id: u32,
    #[key]
    address: ContractAddress,
    color: Color
}

trait PlayerTrait {
    fn is_not_my_piece(self: @Player, piece_color: Color) -> bool;
}


impl PalyerImpl of PlayerTrait {
    fn is_not_my_piece(self: @Player, piece_color: Color) -> bool {
        *self.color != piece_color
    }
}
"
"struct Player {
    #[key]
    game_id:","
    struct Player {
    #[key]
    game_id:u32,
"
"   #[key]
    address:
","
    #[key]
    address:
    address:ContractAddress,
"
"struct Vec2","
struct Vec2 {
    x: u32,
    y: u32
}
"