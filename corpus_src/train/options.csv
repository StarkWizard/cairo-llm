question,answer
"What is an option","
Option represents a value that may or may not exist. 
It is defined as follows:
```
enum Option<T> {
    Some: T,
    None: (),
}
```
 "
"Create an option of value 1 as u8","
 ```
     let some_value: Option<u8> = Option::Some(1_u8);
```
 "
"Create an option of value None","
 ```
    let none_value: Option<u8> = Option::None(());
```
 "
"create a function that returns an option of value 1 as u8","
 ```
    fn create_some() -> Option<u8> {
        let some_value: Option<u8> = Option::Some(1_u8);
        some_value
    }
```
"
"How do I read the value of an Option","    
 ```
    let some_value: Option<u8> = Option::Some(1_u8);
    let val = some_value.unwrap();
```
"
"How do I test if an Option contains a value","
```
    use debug::PrintTrait

    let some_value: Option<u8> = Option::Some(1_u8);
    if some_value.is_some() {
        'The option contains a value'.print();
    }
```
"
"How do I test if an Option contains None","
```
    use debug::PrintTrait

    let none_value: Option<u8> = Option::None(())
    if none_value.is_none() {
        'The option is None'.print();
    }
```
"
"Write a function that returns the value of an option, or 0 if None","
```
    #[external(v0)]
    fn handle_option(self: @ContractState, option: Option<u8>) -> u8 {
        match option{
            Option::Some(value) => value,
            Option::None(_) => 0_u8,
        }
    }
```
or
```
    #[external(v0)]
    fn handle_option_1(self: @ContractState, option: Option<u8>) -> u8 {
        // is_some() Returns 'true' if the 'Option' is 'Option::Some'.
        // is_none()  Returns 'true' if the 'Option' is 'Option::None'.
        if option.is_some() {
            option.unwrap()
        } else {
            0_u8
        }
    }
```
"
"Create an option of value 'hello' as a string slice","
    let some_string: Option<felt> = Some("hello");
"
"How do I match the value of an Option and provide a default if it is None","
    let some_number: Option<u32> = Some(10);
    let number = match some_number {
        Some(value) => value,
        None => 0, // default value if none
    };
"
"How to create an option of a tuple containing different value types","
    let some_tuple: Option<(u32, bool, u64)> = Some((42, true, 314));
"
"How to use the 'unwrap_or' method to get the value inside an Option or a default value","   
     let some_value: Option<u32> = Some(10);
    let value_or_default = some_value.unwrap_or(0); // 0 is the default
"
"How to safely obtain the value of an Option using 'unwrap_or_else'","
    let some_value: Option<String> = Some('Non-empty'.to_string());
    let value = some_value.unwrap_or_else(|| 'Default'.to_string());
"