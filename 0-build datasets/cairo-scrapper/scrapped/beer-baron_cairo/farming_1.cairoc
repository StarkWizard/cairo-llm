trait IFarming<TContractState> {
    // contains functions for building and harvesting a farm
    fn build_farm(self: @TContractState, game_id: u64, area_type: Array<u64>);
    fn harvest_farm(self: @TContractState, game_id: u64);
}

trait IWorldDispatcherTrait {
    // contains functions for getting data from the world
    fn read(&mut self) -> IWorldDispatcher;
}

struct Game {
    // contains the data for a game
    game_id: u64,
    game_type: u8,
    seed: u32,
    status: GameStatus,
    start_time: u64,
    end_time: u64,
    player_count: u32,
    active: bool
}

trait GameTrait {
    // contains functions for checking if the game is active
    fn active(&mut self);
}

struct GameTracker {
    // contains the data for tracking games
    game_id: u64,
    player_id: ContractAddress
}

enum GameStatus {
    // contains the status of a game
    created,
    started,
    ended
}

struct Ownership {
    // contains the ownership data for a game
    game_id: u64,
    player_id: ContractAddress,
    joined: Joined
}

enum Joined {
    // contains the joined status of a player in a game
    yes,
    no
}

struct GameConfig {
    // contains the configuration data for a game
    max_players: u32,
    game_length: u32,
    password: felt252,
    entry_fee: u32
}

struct Player {
    // contains the data for a player
    name: u32,
    game_id: u64,
    gold: u128,
    score: u128
}

struct FarmArea {
    // contains the data for a farm area
    game_id: u64,
    player_id: ContractAddress,
    area_id: u32,
    area_type: u32,
    time_built: u64
}

struct ItemBalance {
    // contains the balance of an item
    balance: u128
}

enum SYSTEM_IDS {
    // contains the ids of the different system contracts
    GAME_CONFIG
}

enum STARTING_BALANCES {
    // contains the starting balances of the different items
    GOLD
}

enum ITEM_IDS {
    // contains the ids of the different items
    HOP_SEEDS,
    HOP_FLOWERS,
    BEERS,
    GOLD_ID
}

trait IAuctionDispatcherTrait {
    // contains functions for getting the auction contract address
    fn get_auction_contract_address(&mut self) -> ContractAddress;
}

enum SEED_TO_FLOWER_OFFSET {
    // contains the offset from seed id to flower id
    HOP_SEEDS_TO_HOP_FLOWERS
}

struct PLOT_COUNT {
    // contains the number of plots on a farm
}

struct CROP_GROWTH_TIME {
    // contains the time it takes for a crop to grow
    HOP_FLOWERS
}

struct CROP_YIELD {
    // contains the yield of a crop
    HOP_FLOWERS
}

impl FarmingImpl of IFarming<ContractState> {
    // implements the IFarming trait for the FarmingImpl struct

    fn build_farm(self: @ContractState, game_id: u64, area_type: Array<u64>) {
        // builds a farm

        // get the world data
        let world = self.world_dispatcher.read();

        // assert that the game is active
        let game = get!(world, (game_id), (Game));
        game.active();

        // assert that the player has submitted the correct number of areas
        assert(area_type.len() == PLOT_COUNT.try_into().unwrap(), "you must submit 6 areas");

        // get the caller's address
        let caller = get_caller_address();

        // loop through all the farm areas
        for area_id in 0..area_type.len() {
            // get the item type for the area
            let item_type = *area_type[area_id];

            // if the item type is not 0
            if item_type != 0 {
                // check if the player has enough items and subtract
                let mut item_balance = get!(world, (game_id, caller, item_type), (ItemBalance));
                assert(item_balance.balance > 0, "you do not have enough items");
                item_balance.balance -= 1;
                set!(world, (item_balance));

                // create a new farm area
                set!(
                    world,
                    FarmArea {
                        game_id,
                        player_id: caller,
                        area_id: area_id.into(),
                        area_type: item_type,
                        time_built: get_block_timestamp()
                    }
                );
            }
        }
    }

    fn harvest_farm(self: @ContractState, game_id: u64) {
        // harvests the crops on the player's farm

        // get the world data
        let world = self.world_dispatcher.read();

        // assert that the game is active
        let game = get!(world, (game_id), (Game));
        game.active();

        // get the caller's address
        let caller = get_caller_address();

        // loop through all the farm areas
        for area_id in 0..PLOT_COUNT.try_into().unwrap() {
            // get the farm area data
            let mut farm_area = get!(world, (game_id, caller, area_id), (FarmArea));

            // if the area is not empty
            if farm_area.area_type != 0 {
                // calculate the time since the crop was planted
                let time_since_build = get_block_timestamp() - farm_area.time_built;

                // if the crop is ready to harvest
                if time_since_build > CROP_GROWTH_TIME.try_into().unwrap() {
                    // get the grown hop balance - see consts file
                    // grown item is the hop + 10 for ids
                    let mut item_balance = get!(
                        world,
                        (
                            game_id,
                            caller,
                            farm_area.area_type + SEED_TO_FLOWER_OFFSET.try_into().unwrap()
                        ),
                        (ItemBalance)
                    );

                    // add the harvested hops to the player's balance
                    item_balance.balance += CROP_YIELD.try_into().unwrap();

                    // reset the farm area data
                    let updated_farm = FarmArea {
                        game_id,
                        player_id: caller,
                        area_id: area_id.into(),
                        area_type: 0,
                        time_built: 0
                    };

                    // set the updated data back to the world
                    set!(world, (updated_farm, item_balance));
                }
            }
        }
    }
}